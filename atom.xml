<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Polar1sssss</title>
  
  
  <link href="https://polar1sssss.github.io/atom.xml" rel="self"/>
  
  <link href="https://polar1sssss.github.io/"/>
  <updated>2021-08-18T11:36:36.011Z</updated>
  <id>https://polar1sssss.github.io/</id>
  
  <author>
    <name>Jiantao Hu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>缓存&amp;分布式锁</title>
    <link href="https://polar1sssss.github.io/2021/08/16/%E7%BC%93%E5%AD%98&amp;%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>https://polar1sssss.github.io/2021/08/16/%E7%BC%93%E5%AD%98&amp;%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</id>
    <published>2021-08-16T06:29:55.000Z</published>
    <updated>2021-08-18T11:36:36.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><h2 id="缓存使用"><a href="#缓存使用" class="headerlink" title="缓存使用"></a>缓存使用</h2><p>为了系统性能的提升，一般会将部分数据放入缓存，加速访问。而db承担数据落盘工作。</p><p><strong>那些数据适合放入缓存？</strong></p><ul><li>即时性、数据一致性要求不高的数据</li><li>访问量大且更新频率不高的数据（读多写少） </li></ul><p>举例：电商类应用，商品分类，商品列表等适合缓存，并加一个失效时间（根据数据更新频率来定），后台如果发布一个商品，买家需要5分钟才可以看到商品是可以接受的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data = cache.load(id); // 从缓存加载数据</span><br><span class="line">if(data == null) &#123;</span><br><span class="line">data = db.load(id);</span><br><span class="line">cache.put(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="整合redis作为缓存"><a href="#整合redis作为缓存" class="headerlink" title="整合redis作为缓存"></a>整合redis作为缓存</h2><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--压力测试：产生堆外内存溢出：OutOfDirectMemoryError--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringBoot2.0之后使用lettuce作为操作redis客户端，lettuce的bug导致netty堆外内存溢出--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--netty如果没有指定堆外内存，会使用参数中的-Xmx100m，可以通过-Dio.netty.maxDirectMemory设置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--解决方案：1）升级lettuce客户端 2）切换使用jedis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.lettuce<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lettuce-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>自动注入RedisTemplate操作redis</p></li></ol><h1 id="缓存失效问题"><a href="#缓存失效问题" class="headerlink" title="缓存失效问题"></a>缓存失效问题</h1><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><ul><li><p>指查询一个一定不存在的数据，由于缓存是不命中的，将去查询数据库，但是数据库也无此记录，我们没有将这次查询的null写入缓存，这将导致每次请求这个不存在的数据都要到存储层查询，失去了缓存的意义。</p></li><li><p>风险：利用不存在的数据进行攻击，数据库顺时压力增大，最终导致崩溃。</p></li><li><p>解决：缓存空对象、布隆过滤器、mvc拦截器。</p></li></ul><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><ul><li>缓存雪崩是指在缓存数据时对key设置了相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到DB，DB瞬时压力过重导致雪崩。</li><li>解决方案：<ul><li>规避雪崩：缓存数据的过期时间设置随机，防止同一时间大量数据过期现象发生。</li><li>如果缓存数据库是分布式部署，将热点数据均匀分布在不同缓存数据库中。</li><li>设置热点数据永远不过期。</li><li>出现雪崩：降级 熔断</li><li>事前：尽量保证整个 redis 集群的高可用性，发现机器宕机尽快补上。选择合适的内存淘汰策略</li><li>事中：本地ehcache缓存 + hystrix限流&amp;降级，避免MySQL崩掉</li><li>事后：利用 redis 持久化机制保存的数据尽快恢复缓存</li></ul></li></ul><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><ul><li>对于一些设置了过期时间的key，如果这些key可能会在某些时间点被超高并发的访问，是一种非常热点的数据。如果这个key在大量请求过来前正好失效，那么所有对这个key的查询请求都会落在DB上，成为缓存击穿。</li><li>解决方案：<ul><li>设置热点数据永远不过期。</li><li>加互斥锁：业界比较常用的做法，是使用mutex。简单地来说，就是在缓存失效的时候（判断拿出来的值为空），不是立即去load db去数据库加载，而是先使用缓存工具的某些带成功操作返回值的操作（比如Redis的SETNX或者Memcache的ADD）去set一个mutex key，当操作返回成功时，再进行load db的操作并回设缓存；否则，就重试整个get缓存的方法。</li></ul></li></ul><h1 id="缓存数据一致性"><a href="#缓存数据一致性" class="headerlink" title="缓存数据一致性"></a>缓存数据一致性</h1><h2 id="双写模式"><a href="#双写模式" class="headerlink" title="双写模式"></a>双写模式</h2><p>更新数据库的同时，更新缓存。</p><p>存在的问题：</p><p><img src="https://cdn.jsdelivr.net/gh/Polar1sssss/FigureBed/img/guli-010.png"></p><h2 id="失效模式"><a href="#失效模式" class="headerlink" title="失效模式"></a>失效模式</h2><p>更新数据库之后删除缓存，等待下一次请求放一份新的数据到缓存。</p><p>存在的问题：</p><p><img src="https://cdn.jsdelivr.net/gh/Polar1sssss/FigureBed/img/guli-011.png"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>无论是双写模式还是失效模式，都会导致缓存不一致的问题，即多个实例同时更新会出现问题，怎么办？</p><ol><li>如果是用户维度数据（订单数据、用户信息），并发几率较小，不用考虑这个问题，缓存数据加上过期时间，每段时间触发读的主动更新即可。</li><li>如果是菜单、商品介绍等基础数据，也可以去使用canal订阅binlog的方式。</li><li>缓存数据 + 过期时间足够解决大部分业务对于缓存的要求。</li><li>通过加锁保证并发读写，写写的时候按照顺序排好队。读读无所谓，所以适合使用读写锁。（业务不关心脏数据，允许临时脏数据可忽略）。</li></ol><p>总结：</p><ul><li>能放入缓存的数据不应该是实时性、一致性要求超高的。所以缓存数据的时候加上过期时间，保证每天拿到当前的最新数据即可。</li><li>不应该过度设计，增加系统的复杂性。</li><li>遇到实时性、一致性要求高的数据，就应该查数据库，即使慢一点。</li></ul><h1 id="分布式缓存"><a href="#分布式缓存" class="headerlink" title="分布式缓存"></a>分布式缓存</h1><p>本地缓存问题：每个微服务都有缓存服务，数据库更新时只更新自己的缓存，造成缓存数据不一致</p><p>解决方案：分布式缓存，微服务共用缓存中间件</p><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><ul><li><p>为什么要用分布式锁？</p><p>在分布式项目中，本地缓存只能锁住当前服务，需要引入分布式锁。</p></li><li><p>redis分布式锁原理：底层是setnx命令，同一时刻只能成功加一把锁。</p></li><li><p>如果没获取到锁，采取自旋重试的方式进行阻塞。</p></li><li><p>setnx占好锁，业务代码异常或程序在执行过程中服务器宕机，没有执行删除锁的逻辑，造成死锁，如何解决？</p><p>解决：为锁设置过期时间（加锁和设置过期时间应当是一个原子操作）。</p></li><li><p>A业务没执行完锁过期了，B拿到了锁，A执行完业务把B的锁删了，如何解决？</p><p>解决：占锁的时候，值指定为uuid，每个人匹配到自己的锁才能删除。</p></li><li><p>判断uuid是自己的锁，但是删除锁的时候锁过期了，此时别人给锁设置了新值，最后删除的是别人的锁，如何解决？</p><p>解决：删除锁（判断是不是自己的锁 + 删除操作）时必须保证原子性，使用redis + Lua脚本。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> redis.call(<span class="string">&quot;get&quot;</span>,KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="keyword">return</span> redis.call(<span class="string">&quot;del&quot;</span>,KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redisTemplate.execute(</span><br><span class="line">    <span class="keyword">new</span> DefaultRedisScript&lt;Long&gt;(script脚本, Long.class), </span><br><span class="line">    Arrays.asList(<span class="string">&quot;lock&quot;</span>), <span class="comment">// 键key的集合</span></span><br><span class="line">    lockValue);</span><br></pre></td></tr></table></figure></li><li><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;String, List&lt;Catalog2Vo&gt;&gt; getCatalogJsonFromDb() &#123;</span><br><span class="line">    String uuid = UUID.randomUUID().toString();</span><br><span class="line">    <span class="comment">// 加分布式锁，设置过期时间，防止缓存击穿</span></span><br><span class="line">    Boolean lock = redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>, uuid, Duration.ofSeconds(<span class="number">30</span>));</span><br><span class="line">    <span class="keyword">if</span> (lock) &#123;</span><br><span class="line">        <span class="comment">// 加锁成功</span></span><br><span class="line">        List&lt;CategoryEntity&gt; categoryEntities = baseMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 查出所有一级分类</span></span><br><span class="line">        List&lt;CategoryEntity&gt; level1Categories = <span class="keyword">this</span>.getParentCid(categoryEntities, <span class="number">0L</span>);</span><br><span class="line">        <span class="comment">// 封装成map数据</span></span><br><span class="line">        Map&lt;String, List&lt;Catalog2Vo&gt;&gt; parent_cid;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            parent_cid = level1Categories.stream().collect(</span><br><span class="line">                Collectors.toMap(k -&gt; k.getCatId().toString(), v -&gt; &#123;</span><br><span class="line">                    <span class="comment">// 根据一级分类id查出所有的二级分类</span></span><br><span class="line">                    List&lt;CategoryEntity&gt; entities = getParentCid(categoryEntities, v.getCatId());</span><br><span class="line">                    List&lt;Catalog2Vo&gt; catalog2Vos = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (entities != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 封装Catalog2Vo对象成为一个list</span></span><br><span class="line">                        catalog2Vos = entities.stream().map(l2 -&gt; &#123;</span><br><span class="line">                            Catalog2Vo catalog2Vo = <span class="keyword">new</span> Catalog2Vo(v.getCatId().toString(), <span class="keyword">null</span>, l2.getCatId().toString(), l2.getName());</span><br><span class="line">                            <span class="comment">// 根据二级分类id查出所有的三级分类</span></span><br><span class="line">                            List&lt;CategoryEntity&gt; entities1 = getParentCid(categoryEntities, l2.getCatId());</span><br><span class="line">                            List&lt;Catalog2Vo.Catalog3Vo&gt; catalog3Vos = <span class="keyword">null</span>;</span><br><span class="line">                            <span class="keyword">if</span> (entities1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                <span class="comment">// 封装Catalog3Vo对象成为一个list</span></span><br><span class="line">                                catalog3Vos = entities1.stream().map(l3 -&gt; &#123;</span><br><span class="line">                                    Catalog2Vo.Catalog3Vo catalog3Vo = <span class="keyword">new</span> Catalog2Vo.Catalog3Vo(catalog2Vo.getId().toString(), l3.getCatId().toString(), l3.getName());</span><br><span class="line">                                    <span class="keyword">return</span> catalog3Vo;</span><br><span class="line">                                &#125;).collect(Collectors.toList());</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">// 为Catalog2Vo对象设置Catalog3Vo属性</span></span><br><span class="line">                            catalog2Vo.setCatalog3List(catalog3Vos);</span><br><span class="line">                            <span class="keyword">return</span> catalog2Vo;</span><br><span class="line">                        &#125;).collect(Collectors.toList());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> catalog2Vos;</span><br><span class="line">                &#125;));</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            String script = <span class="string">&quot;if redis.call(\&quot;get\&quot;,KEYS[1]) == ARGV[1] then return redis.call(\&quot;del\&quot;,KEYS[1]) else return 0 end;&quot;</span>;</span><br><span class="line">            <span class="comment">// 删除锁</span></span><br><span class="line">            Long lock1 = redisTemplate.execute(<span class="keyword">new</span> DefaultRedisScript&lt;Long&gt;(script, Long.class), Arrays.asList(<span class="string">&quot;lock&quot;</span>), uuid);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parent_cid;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 重试</span></span><br><span class="line">        <span class="keyword">return</span> getCatalogJsonFromDb();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Redisson"><a href="#Redisson" class="headerlink" title="Redisson"></a>Redisson</h2><p><a href="https://github.com/redisson/redisson">https://github.com/redisson/redisson</a></p><p>Redisson是一个在Redis的基础上实现的Java驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务。其中包括(BitSet, Set, Multimap, SortedSet, Map, List, Queue, BlockingQueue, Deque, BlockingDeque, Semaphore, Lock, AtomicLong, CountDownLatch, Publish / Subscribe, Bloom filter, Remote service, Spring cache, Executor service, Live Object service, Scheduler service) Redisson提供了使用Redis的最简单和最便捷的方法。Redisson的宗旨是促进使用者对Redis的关注分离（Separation of Concern），从而让使用者能够将精力更集中地放在处理业务逻辑上。</p><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redissson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRedissonConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(destroyMethod = &quot;shutdown&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedissonClient <span class="title">redisson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Config config = <span class="keyword">new</span> Config();</span><br><span class="line">        config.useSingleServer().setAddress(<span class="string">&quot;redis://192.168.56.10:6379&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">RedissonClient redisson;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取一把锁，只要锁的名字一样，就是同一把锁</span></span><br><span class="line">    RLock lock = redisson.getLock(<span class="string">&quot;my-lock&quot;</span>);</span><br><span class="line">    <span class="comment">// 加锁，阻塞式等待，默认加锁过期时间是30s</span></span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="comment">// lock.lock(10, TimeUnit.SECONDS)：使用这种方法加锁不会自动续期</span></span><br><span class="line">    <span class="comment">// 1）如果指定了超时时间，就发送Lua脚本给redis并执行，进行占锁，默认过期时间就是指定的时间</span></span><br><span class="line">    <span class="comment">// 2）如果未指定超时时间，就使用lockWatchDogTimeOut(30 * 1000)作为过期时间，占锁成功，就会启动一个定时任务【作用是重新给锁设置过期时间，即看门狗过期时间；定时任务每隔10s执行一次】</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 1）锁的自动续期，如果业务执行时间很长，运行期间会自动给锁续上新的30s。不用担心业务过长把锁给删掉</span></span><br><span class="line">        <span class="comment">// 2）加锁的业务只要运行完成，就不会给当前锁续期，即使不手动释放锁，锁默认在30s以后自动删除</span></span><br><span class="line">        System.out.println(<span class="string">&quot;加锁成功，执行业务...&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">        Thread.sleep(<span class="number">30000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;释放锁...&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保证一定能读到最新的数据，修改期间，写锁是一个排它锁（互斥锁），读锁是一个共享锁</span></span><br><span class="line"><span class="comment">     * 读 + 读：相当于无锁，并发读只会在redis中记录所有锁的状态，会同时加读锁成功</span></span><br><span class="line"><span class="comment">     * 写 + 读：需要等待写锁释放才能读</span></span><br><span class="line"><span class="comment">     * 写 + 写：阻塞方式</span></span><br><span class="line"><span class="comment">     * 读 + 写：需要等待读锁释放才能写</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/write&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String s = UUID.randomUUID().toString();</span><br><span class="line">    RReadWriteLock readWriteLock = redisson.getReadWriteLock(<span class="string">&quot;rw-lock&quot;</span>);</span><br><span class="line">    RLock writeLock = readWriteLock.writeLock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        writeLock.lock();</span><br><span class="line">        Thread.sleep(<span class="number">30000</span>);</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;writeValue&quot;</span>, s);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        writeLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/read&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RReadWriteLock readWriteLock = redisson.getReadWriteLock(<span class="string">&quot;rw-lock&quot;</span>);</span><br><span class="line">    RLock readLock = readWriteLock.readLock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        readLock.lock();</span><br><span class="line">        redisTemplate.opsForValue().get(<span class="string">&quot;writeValue&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        readLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/park&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">park</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    RSemaphore semaphore = redisson.getSemaphore(<span class="string">&quot;park&quot;</span>);</span><br><span class="line">    semaphore.acquire(); <span class="comment">// 获取一个信号量</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/go&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">go</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RSemaphore semaphore = redisson.getSemaphore(<span class="string">&quot;park&quot;</span>);</span><br><span class="line">    semaphore.release();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="闭锁"><a href="#闭锁" class="headerlink" title="闭锁"></a>闭锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/lockDoor&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">lockDoor</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    RCountDownLatch door = redisson.getCountDownLatch(<span class="string">&quot;door&quot;</span>);</span><br><span class="line">    door.trySetCount(<span class="number">5</span>);</span><br><span class="line">    door.await(); <span class="comment">// 等待闭锁都完成</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;放假了...&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/gogogo/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">gogogo</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">    RCountDownLatch door = redisson.getCountDownLatch(<span class="string">&quot;door&quot;</span>);</span><br><span class="line">    door.countDown();</span><br><span class="line">    <span class="keyword">return</span> id + <span class="string">&quot;班离开学校&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring-Cache"><a href="#Spring-Cache" class="headerlink" title="Spring Cache"></a>Spring Cache</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>spring从3.1开始定义了Cache、CacheManager接口来统一不同的缓存技术。并支持使用JCache(JSR-107)注解简化我们的开发。</li></ul><ul><li>Cache接口的实现包括RedisCache、EhCacheCache、ConcurrentMapCache等。</li></ul><ul><li>每次调用需要缓存功能的方法时，spring会检查检查指定参数的指定的目标方法是否已经被调用过；如果有就直接从缓存中获取方法调用后的结果，如果没有就调用方法并缓存结果后返回给用户。下次调用直接从缓存中获取。</li></ul><ul><li><p>使用Spring缓存抽象时我们需要关注以下两点：</p><p>1、确定方法需要缓存以及他们的缓存策略<br>2、从缓存中读取之前缓存存储的数据</p></li></ul><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring-boot-starter-data-redis、spring-boot-starter-cache</span><br></pre></td></tr></table></figure><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><ol><li><p>自动配置</p><ul><li><p>CacheAutoConfiguration会导入RedisCacheConfiguration</p></li><li><p>自动配置好缓存管理器RedisCacheManager</p></li></ul></li><li><p>自定义配置</p><p>配置使用redis作为缓存</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">redis</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><ul><li><p>@Cacheable：触发将数据保存到缓存的操作</p><ul><li><p>代表当前方法的返回结果需要缓存，如果缓存中有，方法不会被调用。如果缓存中没有，会调用方法，最后将返回的结果进行jdk序列化并保存到redis。</p></li><li><p>每个需要缓存的数据都需要指定分区（按业务类型划分）。</p></li><li><p>key默认自动生成：缓存的名字::SimpleKey[]。</p></li><li><p>缓存默认过期时间是-1。</p></li><li><p>自定义行为：</p><ul><li><p>指定缓存的key名字：使用key属性，属性值是一个SpEL表达式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Cacheable(key=&quot;#root.method.name&quot;) // 以方法名字作为key</span><br></pre></td></tr></table></figure></li><li><p>指定缓存的过期时间：修改配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line"><span class="attr">time-to-live:</span> <span class="number">3600000</span> <span class="comment"># 默认单位是毫秒</span></span><br></pre></td></tr></table></figure></li><li><p>指定缓存以json格式保存：自定义配置类</p></li></ul></li></ul></li><li><p>@CacheEvict：触发从缓存删除数据的操作，失效模式</p></li><li><p>@CachePut：不影响方法执行更新缓存，双写模式</p></li><li><p>@Caching：组合以上多个操作</p></li><li><p>@CacheConfig：在类级别共享缓存的相同配置</p></li><li><p>同时删除多个缓存：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同时执行多个删除操作</span></span><br><span class="line"><span class="meta">@Caching(evict = &#123;</span></span><br><span class="line"><span class="meta">    @CacheEvict(value = &quot;category&quot;, key = &quot;&#x27;getLevel1Categories&#x27;&quot;),</span></span><br><span class="line"><span class="meta">    @CacheEvict(value = &quot;category&quot;, key = &quot;&#x27;getCatalogJson&#x27;&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除某个分区下的所有缓存</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;category&quot;, allEntries = true)</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="缓存穿透问题解决"><a href="#缓存穿透问题解决" class="headerlink" title="缓存穿透问题解决"></a>缓存穿透问题解决</h2><p>@Cacheablle(sync=true)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;缓存&quot;&gt;&lt;a href=&quot;#缓存&quot; class=&quot;headerlink&quot; title=&quot;缓存&quot;&gt;&lt;/a&gt;缓存&lt;/h1&gt;&lt;h2 id=&quot;缓存使用&quot;&gt;&lt;a href=&quot;#缓存使用&quot; class=&quot;headerlink&quot; title=&quot;缓存使用&quot;&gt;&lt;/a&gt;缓存使用&lt;/h</summary>
      
    
    
    
    
    <category term="Java" scheme="https://polar1sssss.github.io/tags/Java/"/>
    
    <category term="项目开发" scheme="https://polar1sssss.github.io/tags/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>谷粒商城项目-性能压测&amp;缓存</title>
    <link href="https://polar1sssss.github.io/2021/08/16/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E6%80%A7%E8%83%BD%E4%B8%8E%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"/>
    <id>https://polar1sssss.github.io/2021/08/16/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E6%80%A7%E8%83%BD%E4%B8%8E%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/</id>
    <published>2021-08-16T02:51:52.000Z</published>
    <updated>2021-08-16T08:54:14.938Z</updated>
    
    <content type="html"><![CDATA[<h1 id="性能监控"><a href="#性能监控" class="headerlink" title="性能监控"></a>性能监控</h1><h2 id="jvm内存模型"><a href="#jvm内存模型" class="headerlink" title="jvm内存模型"></a>jvm内存模型</h2><ul><li>程序计数器 Program Counter Register：<ul><li>记录的是正在执行的虚拟机字节码指令的地址</li><li>此内存区域是唯一一个在Java虚拟机规范中没有规定OutOfMemoryError的区域</li></ul></li><li>虚拟机栈 VMStack：<ul><li>描述的是Java方法执行的内存模型，每个方法在执行时都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、方法接口等信息</li><li>局部变量表存储了编译期可知的各种基本数据类型、对象引用</li><li>线程请求的栈深度不够时会报StackOverflowError异常</li><li>栈动态扩展的容量不够会报OutOfMemoryError异常</li><li>虚拟机栈是线程隔离的，即每个线程都有自己独立的虚拟机栈 </li></ul></li><li>本地方法栈 Native Stack：<ul><li>本地方法栈类似于虚拟机栈，只不过本地方法栈使用的是本地方法</li></ul></li><li>堆 Heap：<ul><li>几乎所有的对象实例都在堆上分配内存</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Polar1sssss/FigureBed/img/guli-009.png"></p><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>所有对象实例和数组都要在堆上分配。堆是垃圾收集器管理的主要区域，也被成为“GC堆”；也是优化时最多考虑的地方。</p><p>堆可以细分为：</p><ul><li>新生代<ul><li>Eden空间</li><li>FromSurvivor空间</li><li>ToSurvivor空间</li></ul></li><li>老年代</li><li>永久代/元空间<ul><li>Java8以前称为永久代，受jvm管理；Java8及以后称为元空间，直接使用物理内存。因此，默认情况下，元空间的大小仅受本地内存限制。</li></ul></li></ul><h2 id="jconsole与jvisualvm"><a href="#jconsole与jvisualvm" class="headerlink" title="jconsole与jvisualvm"></a>jconsole与jvisualvm</h2><h3 id="jvisualvm能干什么"><a href="#jvisualvm能干什么" class="headerlink" title="jvisualvm能干什么"></a>jvisualvm能干什么</h3><p>监控内存泄露，跟踪垃圾回收，执行时内存、cpu分析，线程分析…</p><h3 id="安装插件方便查看gc"><a href="#安装插件方便查看gc" class="headerlink" title="安装插件方便查看gc"></a>安装插件方便查看gc</h3><ol><li>cmd启动jvisualvm</li><li>点击工具 – 插件 – 可用插件 – Visual GC</li><li>如果出现503错误，解决方法：<ol><li>打开网址<a href="https://visualvm.github.io/pluginscenters.html">https://visualvm.github.io/pluginscenters.html</a></li><li>cmd查看自己jdk版本，找到与之对应的插件地址</li></ol></li></ol><h2 id="监控指标"><a href="#监控指标" class="headerlink" title="监控指标"></a>监控指标</h2><h3 id="中间件指标"><a href="#中间件指标" class="headerlink" title="中间件指标"></a>中间件指标</h3><ul><li>中间件越多，性能损失越大，大多损失在网络交互</li><li>业务：<ul><li>DB</li><li>模板渲染速度（开启缓存）</li><li>静态资源（使用Nginx进行动静分离：静态资源的请求交给Nginx处理，动态请求交给Tomcat处理）</li></ul></li></ul><h3 id="数据库指标"><a href="#数据库指标" class="headerlink" title="数据库指标"></a>数据库指标</h3><ul><li>SQL耗时越小越好，一般情况下微秒级别</li><li>命中率越高越好，一般情况下不能低于95%</li><li>锁等待次数越低越好，等待时间越短越好</li></ul><h2 id="JVM分析-amp-调优"><a href="#JVM分析-amp-调优" class="headerlink" title="JVM分析&amp;调优"></a>JVM分析&amp;调优</h2><h3 id="几个常用工具"><a href="#几个常用工具" class="headerlink" title="几个常用工具"></a>几个常用工具</h3><h3 id="命令示例"><a href="#命令示例" class="headerlink" title="命令示例"></a>命令示例</h3><h3 id="调优项"><a href="#调优项" class="headerlink" title="调优项"></a>调优项</h3><h1 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h1><p>压力测试考察当前软硬件环境下系统所能承受的最大负荷，并帮助找出系统的瓶颈所在。压测是为了系统在线上的处理能力和稳定性维持在一个标准范围内。</p><p>使用压力测试，可以方便找出其他测试方法更难发现的问题，如内存泄露，并发与同步。</p><p>有效的压力测试系统将应用以下这些关键条件：重复，并发，量级，随机变化。</p><h2 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h2><ul><li><p>响应时间（Response Time RT）：响应时间指用户从客户端发起一个请求开始，到客户端接收到从服务端返回的响应结束，整个过程耗费的时间。</p></li><li><p>HPS（Hits Per Second）：每秒点击次数，单位是次/秒。</p></li><li><p>QPS（Query Per Second）：系统每秒处理查询次数，单位是次/秒。</p></li><li><p>TPS（Transaction Per Second）：系统每秒处理交易数，单位是笔/秒。</p><p>对于互联网业务中，如果某些业务有且只有一个请求连接，那么TPS=QPS=HPS，一般情况下，用TPS衡量整个业务流程，用QPS衡量接口查询次数，用HPS来表示对服务器单机请求。</p><p>无论TPS、QPS、HPS，都是衡量系统处理能力非常重要的指标，越大越好，根据经验，一般情况如下：</p><p>​    金融行业：1000TPS~50000TPS，不包括互联网化的活动</p><p>​    保险行业：100TPS~100000TPS，不包括互联网化的活动</p><p>​    制造行业：10TPS~5000TPS</p><p>​    互联网电子商务：10000TPS~1000000TPS</p><p>​    互联网中型网站：1000TPS~50000TPS</p><p>​    互联网小型网站：500TPS~10000TPS</p></li><li><p>最大响应时间（Max Response Time）：指用户发出请求或者指令到系统做出反应（响应）的最大时间。</p></li><li><p>最少响应时间（Mininum Response Time）：指用户发出请求或者指令到系统做出反应（响应）的最少时间。</p></li><li><p>从外部看，性能测试主要关注以下三个指标：</p><ul><li>吞吐量：每秒钟系统能够处理的请求数、任务数</li><li>响应时间：服务处理一个请求或一个任务的耗时</li><li>错误率：一批请求中结果出错的请求所占的比例</li></ul></li></ul><h2 id="JMeter"><a href="#JMeter" class="headerlink" title="JMeter"></a>JMeter</h2><h3 id="JMeter-Address-Always-In-Use错误解决"><a href="#JMeter-Address-Always-In-Use错误解决" class="headerlink" title="JMeter Address Always In Use错误解决"></a>JMeter Address Always In Use错误解决</h3><p>Windows本身提供的端口访问机制问题。</p><p>Windows提供给TCP/IP连接的端口为1024~5000，并且要四分钟来循环回收他们。就导致我们在短时间内跑大量请求将端口占满。</p><ol><li>cmd中，用regedit命令打开注册表</li><li>在HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters下，<ol><li>右击parameters，添加一个新的DWORD，名字为MaxUserPort</li><li>双击MaxUserPort，输入数值数据为65534，基数选择十进制（如果是分布式运行的话，控制机器和负载机器都需要这样的操作）</li><li>继续添加一个新的DWORD，名字为TCPTimedWaitDelay，值为十进制的30</li></ol></li><li>修改完配置需要重启机器才能生效</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;性能监控&quot;&gt;&lt;a href=&quot;#性能监控&quot; class=&quot;headerlink&quot; title=&quot;性能监控&quot;&gt;&lt;/a&gt;性能监控&lt;/h1&gt;&lt;h2 id=&quot;jvm内存模型&quot;&gt;&lt;a href=&quot;#jvm内存模型&quot; class=&quot;headerlink&quot; title=&quot;jvm</summary>
      
    
    
    
    
    <category term="Java" scheme="https://polar1sssss.github.io/tags/Java/"/>
    
    <category term="项目开发" scheme="https://polar1sssss.github.io/tags/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>谷粒商城项目-集群部署</title>
    <link href="https://polar1sssss.github.io/2021/07/22/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/"/>
    <id>https://polar1sssss.github.io/2021/07/22/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</id>
    <published>2021-07-22T03:56:19.000Z</published>
    <updated>2021-07-28T03:39:30.145Z</updated>
    
    <content type="html"><![CDATA[<h1 id="k8s快速入门"><a href="#k8s快速入门" class="headerlink" title="k8s快速入门"></a>k8s快速入门</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>kubernetes简称k8s。是用于自动部署，扩展和管理容器化应用程序的开源系统。</p><p>部署方式进化：</p><p><img src="https://cdn.jsdelivr.net/gh/Polar1sssss/FigureBed/img/container_evolution.svg" alt="container_evolution"></p><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><h3 id="整体主从方式"><a href="#整体主从方式" class="headerlink" title="整体主从方式"></a>整体主从方式</h3><p><img src="https://cdn.jsdelivr.net/gh/Polar1sssss/FigureBed/img/guli003.png" alt="guli003"></p><h3 id="master节点架构"><a href="#master节点架构" class="headerlink" title="master节点架构"></a>master节点架构</h3><p><img src="https://cdn.jsdelivr.net/gh/Polar1sssss/FigureBed/img/guli005.png" alt="guli005"></p><p>kube-apiserver</p><ul><li>对外暴露K8S的接口，是外界进行资源操作的唯一入口</li><li>提供认证、授权、访问控制、API注册和发现等机制</li></ul><p>etcd</p><ul><li>是兼具一致性和高可用性的键值数据库，可以作为保存Kubernetes所有集群数据的后台数据库</li><li>Kubernetes集群的数据库通常需要有个备份计划</li></ul><p>kube-scheduler</p><ul><li>主节点上的组件，该组件监视那些新创建的未指定运行节点的Pod，并选择节点让Pod在上面运行</li><li>所有对k8s的集群操作，都必须经过主节点进行调度</li></ul><p>kube-controller-manager</p><ul><li><p>在主节点上运行控制器的组件</p></li><li><p>这些控制器包括</p><p>节点控制器(NodeController)：负责在节点出现故障时进行通知和响应。</p><p>副本控制器(ReplicationController)：负责为系统中的每个副本控制器对象维护正确数量的Pod。</p><p>端点控制器（EndpointsController)：填充端点（Endpoints）对象（即加入service与Pod)。</p><p>服务帐户和令牌控制器(Service Account&amp;Token Controllers)：为新的命名空间创建默认帐户和API访可令牌。</p></li></ul><h3 id="Node节点架构"><a href="#Node节点架构" class="headerlink" title="Node节点架构"></a>Node节点架构</h3><p><img src="https://cdn.jsdelivr.net/gh/Polar1sssss/FigureBed/img/guli004.png" alt="guli004"></p><p>kubelet</p><ul><li>一个在集群中每个节点上运行的代理。它保证容器都运行在Pod中</li><li>负责维护容器的生命周期，同时也负责Volume(CSI)和网络(CNI)的管理</li></ul><p>kube-proxy</p><ul><li>负责为提供cluster内部的服务发现和负载均衡</li></ul><p>容器运行环境(Container Runtime)</p><ul><li>容器运行环境是负责运行容器的软件</li><li>Kubernetes支持多个容器运行环境．Docker、containerd、cri-o、rktlet以及任何实现Kubernetes CRI（容器运行环境接口）</li></ul><p>fluentd</p><ul><li>是一个守护进程，它有助于提供集群层面日志集群层面的日志</li></ul><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><img src="https://cdn.jsdelivr.net/gh/Polar1sssss/FigureBed/img/guli006.png" alt="guli006"></p><ul><li>Container：容器，可以是Docker启动的一个容器</li><li>Pod：<ul><li>k8s使用Pod来组织一组容器</li><li>一个Pod中的所有容器共享同一网络</li><li>Pod是k8s中的最小部署单元</li></ul></li><li>Volume：<ul><li>声明在Pod容器中可访问的文件目录</li><li>可以被挂载在Pod中一个或多个容器指定路径下</li><li>支持多种后端存储抽象（本地存储、分布式存储、云存储…）</li></ul></li><li>Controllers：更高层次对象，部署和管理Pod<ul><li>ReplicaSet：确保预期的Pod副本数量</li><li>Deployment：无状态应用部署</li><li>StatefulSet：有状态应用部署</li><li>DaemonSet：确保所有Node都运行一个指定Pod</li><li>Job：一次性任务</li><li>Cronjob：定时任务</li></ul></li><li>Deployment：<ul><li>定义一组Pod的副本数目、版本等</li><li>通过控制器（Controller）维持Pod数目（自动恢复失败的Pod）</li><li>通过控制器已指定的策略控制版本（滚动升级，回滚等）</li></ul></li><li>Service：<ul><li>定义一组Pod的访问策略</li><li>Pod的负载均衡，提供一个或者多个Pod的稳定访问地址</li><li>支持多种方式（ClusterIP、NodePort、LoadBalance）</li></ul></li><li>Label：标签，用于对象资源的查询、筛选</li><li>Namespace：命名空间，逻辑隔离<ul><li>一个集群内部的逻辑隔离机制（鉴权，资源）</li><li>每个资源都属于一个namespace</li><li>同一个namespace所有资源名不能重复</li><li>不同namespace的资源名可以重复</li></ul></li></ul><h1 id="k8s集群安装"><a href="#k8s集群安装" class="headerlink" title="k8s集群安装"></a>k8s集群安装</h1><h2 id="kubeadm"><a href="#kubeadm" class="headerlink" title="kubeadm"></a>kubeadm</h2><p>kubeadm是官方社区推出的一个用于快速部署kuberneters集群的工具。</p><p>创建一个master节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init</span><br></pre></td></tr></table></figure><p>将一个node节点加入到当前集群中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join &lt;Master节点的IP和端口&gt;</span><br></pre></td></tr></table></figure><h2 id="前置要求"><a href="#前置要求" class="headerlink" title="前置要求"></a>前置要求</h2><ul><li>一台或多台机器，操作系统Centos7.x-86_x64</li><li>硬件配置：2GB或更多RAM，2个CPU或更多CPU，硬盘30GB或更多</li><li>集群中所有的机器之间网络互通</li><li>可以访问外网，需要拉取镜像</li><li>禁止swap分区</li></ul><h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><ol><li>在所有的节点上安装Docker和kubeadm</li><li>部署Kubernetes Master</li><li>部署容器网络插件</li><li>部署Kubernetes Node，将节点加入Kubernetes集群中</li><li>部署DashBoard web页面，可视化查看Kubernetes资源</li></ol><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>使用vagrant快速创建三台虚拟机。虚拟机启动前先设置virtualbox的主机网络。全部统一为192.168.56.1，以后所有虚拟机都是56.x的ip地址。（管理 – 主机网络管理器 – 手动配置网卡）</li><li>设置虚拟机存目录，防止硬盘空间不足。（管理 – 全局设定 – 默认虚拟电脑位置）</li></ul><h3 id="启动三个虚拟机"><a href="#启动三个虚拟机" class="headerlink" title="启动三个虚拟机"></a>启动三个虚拟机</h3><ul><li><p>启动三个虚拟机，使用下面的vagrant文件，复制到非中文无空格目录下，打开cmd窗口运行vagrant up命令启动三个虚拟机。</p><p>Vagrantfile：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Vagrant.configure(&quot;2&quot;) do |config|</span><br><span class="line">(1..3).each do |i|</span><br><span class="line">config.vm.define &quot;k8s-node#&#123;i&#125;&quot; do |node|</span><br><span class="line"># 设置虚拟机的Box</span><br><span class="line">node.vm.box = &quot;centos/7&quot;</span><br><span class="line"># 设置虚拟机主机名</span><br><span class="line">node.vm.hostname = &quot;k8s-node#&#123;i&#125;&quot;</span><br><span class="line"># 设置虚拟机IP</span><br><span class="line">node.vm.network &quot;private_network&quot;, ip: &quot;192.168.56.#&#123;99+i&#125;&quot;, netmask: &quot;225.225.225.0&quot;</span><br><span class="line"># 设置主机和虚拟机的共享目录</span><br><span class="line"># node.vm.synced_folder &quot;~/Documents/vagrant/share&quot;, &quot;/home/vagrant/share&quot;</span><br><span class="line"># VirtualBox相关配置</span><br><span class="line">node.vm.provider &quot;virtualbox&quot; do |v|</span><br><span class="line"># 设置虚拟机名称</span><br><span class="line">v.name = &quot;k8s-node#&#123;i&#125;&quot;</span><br><span class="line"># 设置虚拟机内存大小</span><br><span class="line">v.memory = 4096</span><br><span class="line"># 设置虚拟机cpu个数</span><br><span class="line">v.cpus = 4</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line">end</span><br></pre></td></tr></table></figure></li><li><p>进入三个虚拟机，开启root的密码访问权限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vagrant ssh xxx进入系统后</span><br><span class="line">su root 密码为vagrant</span><br><span class="line">vi /etc/ssh/sshd_config</span><br><span class="line">修改PasswordAuthentication yes/no</span><br><span class="line">重启服务 service sshd restart</span><br></pre></td></tr></table></figure></li><li><p>设置好NAT网络</p></li></ul><h3 id="设置linux环境"><a href="#设置linux环境" class="headerlink" title="设置linux环境"></a>设置linux环境</h3><p>关闭防火墙：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl stop firewalld</span><br><span class="line">$ systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><p>关闭selinux：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sed -i <span class="string">&#x27;s/enforcing/disabled/&#x27;</span> <span class="string">&#x27;/etc/selinux/config&#x27;</span></span><br><span class="line">$ setenforce 0</span><br></pre></td></tr></table></figure><p>关闭swap（内存交换）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ swapoff -a 临时关闭</span><br><span class="line">$ sed -ri <span class="string">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab 永久</span><br><span class="line">free -g 验证swap是否为0</span><br></pre></td></tr></table></figure><p>添加主机名与IP对应关系：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/hosts</span><br><span class="line">10.0.2.21 k8s-node1</span><br><span class="line">10.0.2.22 k8s-node2</span><br><span class="line">10.0.2.23 k8s-node3</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hostnamectl set-hostname &lt;newhostname&gt; 指定当前机器的hostname</span><br><span class="line">su 切换过来</span><br></pre></td></tr></table></figure><p>将桥接的IPv4流量传递到iptables的链：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl --system</span><br></pre></td></tr></table></figure><p>疑难问题：遇见提示是只读的文件系统，运行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -o remount rw/</span><br></pre></td></tr></table></figure><p>date 查看时间（可选）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y ntpdate</span><br><span class="line">ntpdate time.windows.com 同步最新时间</span><br></pre></td></tr></table></figure><h2 id="所有节点安装docker、kubeadm、kubelet、kubectl"><a href="#所有节点安装docker、kubeadm、kubelet、kubectl" class="headerlink" title="所有节点安装docker、kubeadm、kubelet、kubectl"></a>所有节点安装docker、kubeadm、kubelet、kubectl</h2><p>Kubernetes默认CRI（容器运行时）为Docker，因此先安装Docker。</p><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><p>参见前置知识及环境搭建–安装Docker</p><h3 id="安装kubeadm、kubelet、kubectl"><a href="#安装kubeadm、kubelet、kubectl" class="headerlink" title="安装kubeadm、kubelet、kubectl"></a>安装kubeadm、kubelet、kubectl</h3><p>添加yum源地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">repo_gpgcheck=0</span></span><br><span class="line"><span class="string">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span></span><br><span class="line"><span class="string">https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ yum list|grep kube</span><br><span class="line">$ yum install -y kubelet-1.17.3 kubeadm-1.17.3 kubectl-1.17.3</span><br><span class="line">$ systemctl <span class="built_in">enable</span> kubelet</span><br><span class="line">$ systemctl start kubelet</span><br></pre></td></tr></table></figure><h2 id="部署k8s-master"><a href="#部署k8s-master" class="headerlink" title="部署k8s-master"></a>部署k8s-master</h2><h3 id="master节点初始化"><a href="#master节点初始化" class="headerlink" title="master节点初始化"></a>master节点初始化</h3><p>运行master_images.sh下载相关镜像：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">images=(</span><br><span class="line">kube-apiserver:v1.17.3</span><br><span class="line">kube-proxy:v1.17.3</span><br><span class="line">kube-controller-manager:v1.17.3</span><br><span class="line">kube-scheduler:v1.17.3</span><br><span class="line">coredns:1.6.5</span><br><span class="line">etcd:3.4.3-0</span><br><span class="line">pause:3.1</span><br><span class="line">)</span><br><span class="line"><span class="keyword">for</span> imageName <span class="keyword">in</span> <span class="variable">$&#123;images[@]&#125;</span>; <span class="keyword">do</span></span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/<span class="variable">$imageName</span></span><br><span class="line"><span class="comment"># docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName k8s.gcr.io/$imageName</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>初始化master节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubeadm init --apiserver-advertise-address=&lt;master节点ip&gt; --image-repository registry.cn-hangzhou.aliyuncs.com/google_containers --kubernetes-version v1.17.3 --service-cidr=10.96.0.0/16 --pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure><p>由于默认拉取镜像地址k8s.gcr.io国内无法访问，这里指定阿里云镜像仓库地址。</p><p>科普：无类别域间路由（Classless Inter-Domain Routing、CIDR）是一个用于给用户分配IP地址以及在互联网上有效的路由IP数据包的对IP地址进行归类的方法。 </p><p>运行完提前复制：加入集群的令牌。</p><h3 id="测试kubectl（主节点执行）"><a href="#测试kubectl（主节点执行）" class="headerlink" title="测试kubectl（主节点执行）"></a>测试kubectl（主节点执行）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">$ sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">$ sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get nodes 获取所有节点</span><br></pre></td></tr></table></figure><p>目前master状态为notready。等待网络加入完成即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ journalctl -u kubelet 查看kubelet日志</span><br></pre></td></tr></table></figure><h2 id="安装Pod网络插件（CNI）"><a href="#安装Pod网络插件（CNI）" class="headerlink" title="安装Pod网络插件（CNI）"></a>安装Pod网络插件（CNI）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure><h2 id="加入kubenetes的Node节点"><a href="#加入kubenetes的Node节点" class="headerlink" title="加入kubenetes的Node节点"></a>加入kubenetes的Node节点</h2><p>执行“测试kubectl”步骤中产生的日志信息将节点加入到集群中。</p><h2 id="入门操作kubernetes集群"><a href="#入门操作kubernetes集群" class="headerlink" title="入门操作kubernetes集群"></a>入门操作kubernetes集群</h2><ol><li><p>部署一个tomcat</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create deployment tomcat6 --image=tomcat6.0.53-jre8</span><br><span class="line">$ kubectl get pods -o wide 可以获取到tomcat的信息</span><br></pre></td></tr></table></figure></li><li><p>暴露nginx访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl expose deployment tomcat6 --port=80 --target-port=8080 --<span class="built_in">type</span>=NodePort</span><br><span class="line">Pod的80端口会映射容器的8080端口；service会代理Pod的80端口</span><br></pre></td></tr></table></figure></li><li><p>动态扩容测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get deployment</span><br><span class="line">应用升级：kubectl <span class="built_in">set</span> image（--<span class="built_in">help</span>查看帮助）</span><br><span class="line">扩容：kubectl scale --replicas=3 deployment tomcat6</span><br><span class="line">扩容多份，无论访问那个node的指定端口，都可以访问到tomcat6</span><br></pre></td></tr></table></figure></li><li><p>删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get all</span><br><span class="line">$ kubectl delete deploy/nginx</span><br><span class="line">$ kubectl delete service/nginx-service</span><br></pre></td></tr></table></figure></li></ol><p>流程：创建deployment会管理replicas，replicas控制pod数量，有pod故障会自动拉起新的pod。</p><h2 id="安装默认dashboard"><a href="#安装默认dashboard" class="headerlink" title="安装默认dashboard"></a>安装默认dashboard</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;k8s快速入门&quot;&gt;&lt;a href=&quot;#k8s快速入门&quot; class=&quot;headerlink&quot; title=&quot;k8s快速入门&quot;&gt;&lt;/a&gt;k8s快速入门&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简</summary>
      
    
    
    
    
    <category term="项目开发" scheme="https://polar1sssss.github.io/tags/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/"/>
    
    <category term="java" scheme="https://polar1sssss.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>谷粒商城项目-Elasticsearch全文检索</title>
    <link href="https://polar1sssss.github.io/2021/07/14/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-Elasticsearch%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2/"/>
    <id>https://polar1sssss.github.io/2021/07/14/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-Elasticsearch%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2/</id>
    <published>2021-07-14T06:10:05.000Z</published>
    <updated>2021-08-13T11:36:03.081Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>ElasticSearch可以快速地存储、搜索和分析海量数据。底层是Lucene，ElasticSearch对Lucene进行了封装，提供了REST API（天然跨平台）接口，开箱即用。</p><h2 id="Index（索引）"><a href="#Index（索引）" class="headerlink" title="Index（索引）"></a>Index（索引）</h2><p>动词，相当于MySQL中的insert；</p><p>名词，相当于MySQL中的Database</p><h2 id="Type（类型）"><a href="#Type（类型）" class="headerlink" title="Type（类型）"></a>Type（类型）</h2><p>在Index中，可以定义一个或多个Type；</p><p>类似于MySQL中的Table，每一种类型的数据放在一起</p><h2 id="Document（文档）"><a href="#Document（文档）" class="headerlink" title="Document（文档）"></a>Document（文档）</h2><p>保存在某个索引（Index）下，某种类型（Type）的一个数据（Document），文档是JSON格式，Document就像是MySQL中的某个Table里面的内容。</p><h2 id="倒排索引机制"><a href="#倒排索引机制" class="headerlink" title="倒排索引机制"></a>倒排索引机制</h2><p><strong>分词</strong>：将整句拆分成单词。</p><p>保存5条数据：</p><p>1、红海行动</p><p>2、探索红海行动</p><p>3、红海特别行动</p><p>4、红海纪录片</p><p>5、特工红海特别探索</p><table><thead><tr><th>词</th><th>记录</th></tr></thead><tbody><tr><td>红海</td><td>1，2，3，4，5</td></tr><tr><td>行动</td><td>1，2，3</td></tr><tr><td>探索</td><td>2，5</td></tr><tr><td>特别</td><td>3，5</td></tr><tr><td>纪录片</td><td>4</td></tr><tr><td>特工</td><td>5</td></tr></tbody></table><p><strong>检索</strong>：</p><p>1）红海特工行动（3号记录命中率2/3，5号记录命中率2/4） </p><p>2）红海行动</p><h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><h2 id="下载镜像文件"><a href="#下载镜像文件" class="headerlink" title="下载镜像文件"></a>下载镜像文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull elasticsearch:7.4.2</span><br><span class="line">docker pull kibana -- 可视化检索</span><br></pre></td></tr></table></figure><h2 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h2><h3 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h3><ol><li><p>创建配置及数据文件夹</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /mydata/elasticsearch/config</span><br><span class="line">mkdir -p /mydata/elasticsearch/data</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;http.host: 0.0.0.0&quot;</span> &gt;&gt; /mydata/elasticsearch/config/elasticsearch.yml</span><br></pre></td></tr></table></figure></li><li><p>启动docker</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name elasticsearch -p 9200:9200 -p 9300:9300 -e <span class="string">&quot;discovery.type=single-node&quot;</span> -e ES_JAVA_OPTS=<span class="string">&quot;-Xms64m -Xmx512m&quot;</span> -v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml -v /mydata/elasticsearch/data:/usr/share/elasticsearch/data -v /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins -d elasticsearch:7.4.2 </span><br></pre></td></tr></table></figure></li></ol><h3 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name kibana -e ELASTICSEARCH_URL=http://192.168.146.128:9200 -p 5601:5601 -d kibana:7.4.2</span><br></pre></td></tr></table></figure><h1 id="初步检索"><a href="#初步检索" class="headerlink" title="初步检索"></a>初步检索</h1><h2 id="cat"><a href="#cat" class="headerlink" title="_cat"></a>_cat</h2><p>GET /_cat/nodes：查看所有节点</p><p>GET /_cat/health：查看es健康状态</p><p>GET /_cat/master：查看主节点</p><p>GET /_cat/indices：查看所有索引 show databases;</p><h2 id="索引一个文档（保存）"><a href="#索引一个文档（保存）" class="headerlink" title="索引一个文档（保存）"></a>索引一个文档（保存）</h2><p>保存一个数据，保存在哪个索引的哪个类型下，指定用那个唯一标识</p><p>PUT customer/external/1：必须带id，在customer索引的external类型下保存1号数据，再次发送请求就是更新操作</p><p>POST customer/external/：可以不带id，新增一条数据，自动生成id，再次发送请求重新生成新的id</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;Jhon Doe&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h2><p>GET customer/external/1</p><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;customer&quot;</span>, <span class="comment">// 索引</span></span><br><span class="line">    <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;external&quot;</span>, <span class="comment">// 类型</span></span><br><span class="line">    <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;1&quot;</span>, <span class="comment">// 唯一标识</span></span><br><span class="line">    <span class="attr">&quot;_version&quot;</span>: <span class="number">1</span>, <span class="comment">// 版本号</span></span><br><span class="line">    <span class="attr">&quot;_seq_no&quot;</span>: <span class="number">0</span>, <span class="comment">// 并发控制字段，每次更新+1，用来做乐观锁</span></span><br><span class="line">    <span class="attr">&quot;_primary_term&quot;</span>: <span class="number">1</span>, <span class="comment">// 同上，主分片重新分配，如重启，就会变化</span></span><br><span class="line">    <span class="attr">&quot;found&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;_source&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Jhon Doe&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新时携带?if_seq_no=0&amp;if_primary_term=1：只有满足条件才会更新成功</p><h2 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h2><p>POST customer/external/1/_update：带update更新数据中必须加“doc”，如更新数据与原数据对比无变化，则不会进行更新操作（noop无操作）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;doc&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;Jhon Abc&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>POST customer/external/1</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;Jhon Abc&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PUT customer/external/1</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;Jhon Abc&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除文档-amp-索引"><a href="#删除文档-amp-索引" class="headerlink" title="删除文档&amp;索引"></a>删除文档&amp;索引</h2><p>DELETE customer/external/1</p><p>DELETE customer</p><h2 id="bulk批量API"><a href="#bulk批量API" class="headerlink" title="bulk批量API"></a>bulk批量API</h2><p>POST customer/external/_bulk</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;index&quot;</span>:&#123;<span class="attr">&quot;_id&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;&#125; </span><br><span class="line">&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;zhangsan&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="attr">&quot;index&quot;</span>:&#123;<span class="attr">&quot;_id&quot;</span>:<span class="string">&quot;2&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;lisi&quot;</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">&#123;action:&#123;metadata&#125;&#125;\n</span><br><span class="line">&#123;request body    &#125;\n</span><br><span class="line">&#123;action:&#123;metadata&#125;&#125;\n</span><br><span class="line">&#123;request body    &#125;\n</span><br></pre></td></tr></table></figure><p>POST /_bulk</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;delete&quot;</span>:&#123;<span class="attr">&quot;_index&quot;</span>:<span class="string">&quot;website&quot;</span>,<span class="attr">&quot;_type&quot;</span>:<span class="string">&quot;blog&quot;</span>,<span class="attr">&quot;_id&quot;</span>:<span class="string">&quot;123&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;create&quot;</span>:&#123;<span class="attr">&quot;_index&quot;</span>:<span class="string">&quot;website&quot;</span>,<span class="attr">&quot;_type&quot;</span>:<span class="string">&quot;blog&quot;</span>,<span class="attr">&quot;_id&quot;</span>:<span class="string">&quot;123&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;title&quot;</span>:<span class="string">&quot;My First Blog post&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;index&quot;</span>:&#123;<span class="attr">&quot;_index&quot;</span>:<span class="string">&quot;website&quot;</span>,<span class="attr">&quot;_type&quot;</span>:<span class="string">&quot;blog&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;title&quot;</span>:<span class="string">&quot;My Second Blog post&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;update&quot;</span>:&#123;<span class="attr">&quot;_index&quot;</span>:<span class="string">&quot;website&quot;</span>,<span class="attr">&quot;_type&quot;</span>:<span class="string">&quot;blog&quot;</span>,<span class="attr">&quot;_id&quot;</span>:<span class="string">&quot;123&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;doc&quot;</span>:&#123;<span class="attr">&quot;title&quot;</span>:<span class="string">&quot;My updated blog post&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><h1 id="进阶检索"><a href="#进阶检索" class="headerlink" title="进阶检索"></a>进阶检索</h1><h2 id="Search-API"><a href="#Search-API" class="headerlink" title="Search API"></a>Search API</h2><p>ES支持两种基本方式检索：</p><ul><li><p>通过REST request URI，发送搜索参数（uri+检索参数）</p><p>GET bank/_search?q=*&amp;sort=account_number:asc</p></li><li><p>通过REST request body来发送他们（uri+请求体）</p><p>GET bank/_search</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>：&#123;</span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span>:&#123;&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;sort&quot;</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;account_number&quot;</span>:<span class="string">&quot;asc&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Query-DSL"><a href="#Query-DSL" class="headerlink" title="Query DSL"></a>Query DSL</h2><h3 id="基本语法格式"><a href="#基本语法格式" class="headerlink" title="基本语法格式"></a>基本语法格式</h3><p>ElasticSearch提供了一个可以执行查询JSON风格的DSL（domain-specific language 领域特定语言）。</p><ul><li><p>查询语句的典型结构：</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    QUERY_NAME:&#123;</span><br><span class="line">        ARGUMENT:VALUE,</span><br><span class="line">        ARGUMENT:VALUE</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果是针对某个字段，其结构为：</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    QUERY_NAME:&#123;</span><br><span class="line">        FIELD_NAME:&#123;</span><br><span class="line">            ARGUMENT:VALUE,</span><br><span class="line">            ARGUMENT:VALUE</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="返回部分字段"><a href="#返回部分字段" class="headerlink" title="返回部分字段"></a>返回部分字段</h3><p>GET bank/_search</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span>:&#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;from&quot;</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;size&quot;</span>:<span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;_source&quot;</span>:[<span class="string">&quot;age&quot;</span>,<span class="string">&quot;balance&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="match【匹配查询】"><a href="#match【匹配查询】" class="headerlink" title="match【匹配查询】"></a>match【匹配查询】</h3><ul><li><p>基本类型（非字符串），精确匹配</p><p>GET bank/_search</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;match&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;account_number&quot;</span>:<span class="string">&quot;20&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>字符串，全文检索，对检索条件进行分词匹配</p><p>GET bank/_search</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;match&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;address&quot;</span>:<span class="string">&quot;mill&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="match-phrase【短语匹配】"><a href="#match-phrase【短语匹配】" class="headerlink" title="match_phrase【短语匹配】"></a>match_phrase【短语匹配】</h3><p>将需要匹配的值当成一个整体（不分词）进行匹配。</p><p>GET bank/_search</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;match_phrase&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;address&quot;</span>:<span class="string">&quot;mill road&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查出address中<strong>包含</strong>mill road的所有记录，并给出相关性得分。</p><p>GET bank/_search</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;match&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;address.keyword&quot;</span>:<span class="string">&quot;mill road&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查出address中<strong>等于</strong>mill road的所有记录，并给出相关性得分。</p><h3 id="multi-match【多字段匹配】"><a href="#multi-match【多字段匹配】" class="headerlink" title="multi_match【多字段匹配】"></a>multi_match【多字段匹配】</h3><p>GET bank/_search</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;multi_match&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;query&quot;</span>:<span class="string">&quot;mill movico&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;fields&quot;</span>:[<span class="string">&quot;state&quot;</span>,<span class="string">&quot;address&quot;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查出state或者address中包含mill或movico的记录，并给出相关性得分。</p><h3 id="bool【复合查询】"><a href="#bool【复合查询】" class="headerlink" title="bool【复合查询】"></a>bool【复合查询】</h3><ul><li><p>must：必须符合must列举的所有条件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;bool&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;must&quot;</span>:[</span><br><span class="line">                &#123;<span class="attr">&quot;match&quot;</span>:&#123;<span class="attr">&quot;address&quot;</span>:<span class="string">&quot;mill&quot;</span>&#125;&#125;,</span><br><span class="line">                &#123;<span class="attr">&quot;match&quot;</span>:&#123;<span class="attr">&quot;gender&quot;</span>:<span class="string">&quot;M&quot;</span>&#125;&#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;must_not&quot;</span>:[</span><br><span class="line">                &#123;<span class="attr">&quot;match&quot;</span>:&#123;<span class="attr">&quot;age&quot;</span>:<span class="number">40</span>&#125;&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>should：应该满足should列举的条件，不满足也可以，满足得分会更高。如果query中只有should且只有一种匹配规则，那么should的条件就会被作为默认匹配条件而去改变查询结果。</p></li></ul><h3 id="filter【结果过滤】"><a href="#filter【结果过滤】" class="headerlink" title="filter【结果过滤】"></a>filter【结果过滤】</h3><p>使用filter过滤出来的结果不会产生相关性得分。</p><h3 id="term"><a href="#term" class="headerlink" title="term"></a>term</h3><p>和match一样，匹配某个属性的值。全文检索字段用match，其他非text字段（如数字）匹配用term。</p><p>GET bank/_search</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;term&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;account_number&quot;</span>:<span class="string">&quot;20&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="aggregations【聚合】"><a href="#aggregations【聚合】" class="headerlink" title="aggregations【聚合】"></a>aggregations【聚合】</h3><p>聚合提供了从数据中分组和提取数据的能力。最简单的聚合方法大致等于SQL GROUP BY和聚合函数。</p><ul><li><p>搜索address中包含mill的所有人的年龄分布及平均年龄，但不显示这些人的详情</p><p>GET bank/_search</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;match&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;address&quot;</span>:<span class="string">&quot;mill&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;aggs&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;group_by_state&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;terms&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;field&quot;</span>:<span class="string">&quot;age&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;avg_age&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;avg&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;age&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">   <span class="attr">&quot;size&quot;</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>按照年龄聚合，并求出这些年龄段的平均薪资</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span>:&#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;aggs&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;ageAgg&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;terms&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;field&quot;</span>:<span class="string">&quot;age&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;aggs&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;avgBalance&quot;</span>:&#123;</span><br><span class="line">                    <span class="attr">&quot;avg&quot;</span>:&#123;</span><br><span class="line">                        <span class="attr">&quot;fields&quot;</span>:<span class="string">&quot;balance&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h2><h3 id="创建映射"><a href="#创建映射" class="headerlink" title="创建映射"></a>创建映射</h3><p>PUT /my_index</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;properties&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;age&quot;</span>:&#123;<span class="attr">&quot;type&quot;</span>:<span class="string">&quot;integer&quot;</span>&#125;,</span><br><span class="line">            <span class="attr">&quot;email&quot;</span>:&#123;<span class="attr">&quot;type&quot;</span>:<span class="string">&quot;keyword&quot;</span>&#125;,</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>:&#123;<span class="attr">&quot;type&quot;</span>:<span class="string">&quot;text&quot;</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加新的字段映射"><a href="#添加新的字段映射" class="headerlink" title="添加新的字段映射"></a>添加新的字段映射</h3><p>PUT /my_index/_mapping</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;employee_id&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;keyword&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;index&quot;</span>:<span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更新映射"><a href="#更新映射" class="headerlink" title="更新映射"></a>更新映射</h3><p>不能更新已存在的映射字段，想要更新必须创建新的索引进行数据迁移。</p><h3 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h3><p>先创建新的索引，并配置好映射，然后使用如下方法进行数据迁移：</p><p>POST _reindex 【固定写法，适用于6.0后不用type保存文档的情况】</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;source&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;index&quot;</span>:<span class="string">&quot;bank&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;dest&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;index&quot;</span>:<span class="string">&quot;new_bank&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>POST _reindex 【6.0之前数据迁移】</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;source&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;index&quot;</span>:<span class="string">&quot;bank&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;account&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;dest&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;index&quot;</span>:<span class="string">&quot;new_bank&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h2><p>一个tokenizer接收一个字符流，将之分隔为独立的tokens（词元，通常是独立的单词），然后输出tokens流。</p><h3 id="安装ik分词器"><a href="#安装ik分词器" class="headerlink" title="安装ik分词器"></a>安装ik分词器</h3><p><strong>注意</strong>：不能用默认elasticsearch-plugin install xxx.zip进行自动安装</p><p>进入es容器内部plugins目录，创建ik文件夹，并把压缩包解压到ik目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 容器id /bin/bash</span><br><span class="line">wget https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.4.2/elasticsearch-analysis-ik-7.4.2.zip</span><br><span class="line">unzip 下载的文件</span><br><span class="line">rm -rf *.zip</span><br><span class="line">mv elasticsearch/ik</span><br></pre></td></tr></table></figure><p>检查是否安装好分词器</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ../bin</span><br><span class="line">elasticsearch-plugin list</span><br></pre></td></tr></table></figure><h3 id="测试分词器"><a href="#测试分词器" class="headerlink" title="测试分词器"></a>测试分词器</h3><p>GET my_index/_analyze</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span>:<span class="string">&quot;ik_smart&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;text&quot;</span>:<span class="string">&quot;我是中国人&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义词库"><a href="#自定义词库" class="headerlink" title="自定义词库"></a>自定义词库</h3><p>修改/usr/share/elasticsearch/plugins/ik/config/中的IKAnalyzer.cfg.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">properties</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">extry</span> <span class="attr">key</span>=<span class="string">&quot;ext_stopwords&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">extry</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用户可以在这里配置远程扩展词典--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;remote_ext_dict&quot;</span>&gt;</span>http://192.168.56.10/es/fenci.txt<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Elasticsearch-Rest-Client"><a href="#Elasticsearch-Rest-Client" class="headerlink" title="Elasticsearch-Rest-Client"></a>Elasticsearch-Rest-Client</h1><ol><li>9300：TCP<ul><li>spring-data-elasticsearch:transport-api.jar<ul><li>springboot版本不同，transport-api.jar不同，不能适配es版本</li><li>7.x不建议使用，8之后废弃</li></ul></li></ul></li><li>9200：HTTP<ul><li>JestClient：非官方，更新慢</li><li>RestTemplate：模拟发送HTTP请求，ES很多操作需要自己封装</li><li>HttpClient：同上</li><li>Elasticsearch-Rest-Client（elasticsearch-rest-high-level-client）：官方RestClient，封装了ES操作，API层次分明</li></ul></li></ol><h1 id="附录：安装Nginx"><a href="#附录：安装Nginx" class="headerlink" title="附录：安装Nginx"></a>附录：安装Nginx</h1><ul><li><p>随便启动一个Nginx实例，为了复制配置</p><p>​    docker run -p 80:80 –name nginx -d nginx:1.10</p></li><li><p>将容器内的配置文件拷贝到/mydat目录：docker container cp nginx:/etc/nginx .</p></li><li><p>修改文件名称：mv nginx conf，把这个conf移动到/mydata/nginx下：mv conf /mydata/nginx</p></li><li><p>终止原容器：docker stop nginx</p></li><li><p>执行命令删除原容器：docker rm  $ContainerId</p></li><li><p>创建新的nginx，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80:80 --name nginx -v /mydata/nginx/html:/usr/share/nginx/html -v /mydata/nginx/logs:/var/<span class="built_in">log</span>/nginx -v /mydata/nginx/conf:/etc/nginx -d nginx:1.10</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Polar1sssss/FigureBed/img/guli-007.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Polar1sssss/FigureBed/img/guli-008.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h1&gt;&lt;p&gt;ElasticSearch可以快速地存储、搜索和分析海量数据。底层是Lucene，ElasticSearch对Lucene进</summary>
      
    
    
    
    
    <category term="Java" scheme="https://polar1sssss.github.io/tags/Java/"/>
    
    <category term="项目开发" scheme="https://polar1sssss.github.io/tags/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>谷粒商城项目-问题记录</title>
    <link href="https://polar1sssss.github.io/2021/07/09/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://polar1sssss.github.io/2021/07/09/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2021-07-09T02:43:41.000Z</published>
    <updated>2021-08-12T02:26:31.256Z</updated>
    
    <content type="html"><![CDATA[<h3 id="搭建gulimall-common模块时，language-level总是自动变成5？"><a href="#搭建gulimall-common模块时，language-level总是自动变成5？" class="headerlink" title="搭建gulimall-common模块时，language level总是自动变成5？"></a>搭建gulimall-common模块时，language level总是自动变成5？</h3><p>解决方法：在pom.xml中加入如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="向gulimall-product中导入renren-generator生成的代码，编译时报Cannot-Resolve…？"><a href="#向gulimall-product中导入renren-generator生成的代码，编译时报Cannot-Resolve…？" class="headerlink" title="向gulimall-product中导入renren-generator生成的代码，编译时报Cannot Resolve…？"></a>向gulimall-product中导入renren-generator生成的代码，编译时报Cannot Resolve…？</h3><p>解决方法：重新创建模块，并导入代码。</p><h3 id="启动renren-generator时报错？"><a href="#启动renren-generator时报错？" class="headerlink" title="启动renren-generator时报错？"></a>启动renren-generator时报错？</h3><p>问题原因：</p><ol><li>pom.xml文件中有报错</li><li>.properties文件中数据库连接配置错误</li></ol><h3 id="引入openfeign调用远程服务，启动应用报错？"><a href="#引入openfeign调用远程服务，启动应用报错？" class="headerlink" title="引入openfeign调用远程服务，启动应用报错？"></a>引入openfeign调用远程服务，启动应用报错？</h3><p>问题原因：由于SpringCloud Feign在Hoxton.M2 RELEASED版本之后不再使用Ribbon而是使用spring-cloud-loadbalancer，所以不引入spring-cloud-loadbalancer会报错。</p><p>解决方法：加入spring-cloud-loadbalancer依赖并且在nacos中排除ribbon依赖，不然loadbalancer无效。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="无法加载bootstrap-properties文件？"><a href="#无法加载bootstrap-properties文件？" class="headerlink" title="无法加载bootstrap.properties文件？"></a>无法加载bootstrap.properties文件？</h3><p>解决方法：gulimall-common添加spring-cloud-starter-bootstrap依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ssh连接不上virtualbox，提示“认证失败”？"><a href="#ssh连接不上virtualbox，提示“认证失败”？" class="headerlink" title="ssh连接不上virtualbox，提示“认证失败”？"></a>ssh连接不上virtualbox，提示“认证失败”？</h3><p>解决方法：修改ssh配置文件，并重启sshd服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>打开PermitRootLogin yes、PubkeyAuthentication yes的注释，重启sshd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure><p>具体sshd配置参见：<a href="https://www.jianshu.com/p/adc5072132ee">https://www.jianshu.com/p/adc5072132ee</a></p><h3 id="renren-fast引入gulimall-common无法启动？"><a href="#renren-fast引入gulimall-common无法启动？" class="headerlink" title="renren-fast引入gulimall-common无法启动？"></a>renren-fast引入gulimall-common无法启动？</h3><p>原因分析：gulimall-common中含有nacos-config，导致项目启动时会加载配置中心中的配置，导致报错。</p><p>解决方法：gulimall中含有单独引入nacos-discovery</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在网关服务中配置cors跨域，前台点击登录按钮报错？"><a href="#在网关服务中配置cors跨域，前台点击登录按钮报错？" class="headerlink" title="在网关服务中配置cors跨域，前台点击登录按钮报错？"></a>在网关服务中配置cors跨域，前台点击登录按钮报错？</h3><p>配置类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置允许跨域请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GulimallCorsConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsWebFilter <span class="title">corsWebFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UrlBasedCorsConfigurationSource urlBasedCorsConfigurationSource = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        CorsConfiguration corsConfiguration = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        <span class="comment">//配置跨域</span></span><br><span class="line">        <span class="comment">/*允许服务端访问的客户端请求头*/</span></span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">/*允许访问的方法名,GET POST等*/</span></span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">/*允许访问的客户端域名*/</span></span><br><span class="line">        corsConfiguration.allowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">/*是否允许请求带有验证信息*/</span></span><br><span class="line">        corsConfiguration.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">        urlBasedCorsConfigurationSource.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, corsConfiguration);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsWebFilter(urlBasedCorsConfigurationSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错信息如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">When allowCredentials is true, allowedOrigins cannot contain the special value &quot;*&quot; since that cannot be set on the &quot;Access-Control-Allow-Origin&quot; response header. To allow credentials to a set of origins, list them explicitly or consider using &quot;allowedOriginPatterns&quot; instead.</span><br></pre></td></tr></table></figure><p>原因分析：高版本springboot，如果allowCredentials为true，应当使用addAllowedOriginPattern方法替代allowedOrigin。</p><h3 id="服务启动报错？"><a href="#服务启动报错？" class="headerlink" title="服务启动报错？"></a>服务启动报错？</h3><p>报错信息如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.22.2:test (default-test) on project gulimall-third-party: There are test failures.</span><br><span class="line"></span><br><span class="line">Please refer to D:\idea-projects\gulimall\gulimall-third-party\target\surefire-reports for the individual test results.</span><br><span class="line">Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.</span><br></pre></td></tr></table></figure><p>原因分析：一般是配置文件出现问题（缩进）。</p><h3 id="浏览器访问kibana服务报错：Kibana-server-is-not-ready-yet？"><a href="#浏览器访问kibana服务报错：Kibana-server-is-not-ready-yet？" class="headerlink" title="浏览器访问kibana服务报错：Kibana server is not ready yet？"></a>浏览器访问kibana服务报错：Kibana server is not ready yet？</h3><p>原因分析：</p><p>使用docker logs kibana查看启动日志，报错信息为Unable to revive connection: <a href="http://elasticsearch:9200/">http://elasticsearch:9200</a></p><p>解决方法：</p><p>进入kibana容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it kibana /bin/bash</span><br><span class="line"><span class="built_in">cd</span> config </span><br><span class="line">vi kibana.yml</span><br></pre></td></tr></table></figure><p>修改配置文件内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Default Kibana configuration for docker target</span></span><br><span class="line"><span class="attr">server.name:</span> <span class="string">kibana</span></span><br><span class="line"><span class="attr">server.host:</span> <span class="string">&quot;0&quot;</span></span><br><span class="line"><span class="attr">elasticsearch.hosts:</span> [ <span class="string">&quot;http://192.168.56.10:9200&quot;</span> ]</span><br><span class="line"><span class="attr">xpack.monitoring.ui.container.elasticsearch.enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="解决elasticsearch中数组扁平化问题？"><a href="#解决elasticsearch中数组扁平化问题？" class="headerlink" title="解决elasticsearch中数组扁平化问题？"></a>解决elasticsearch中数组扁平化问题？</h3><p>elasticsearch对数组的扁平化处理会导致查询出现错误结果，通过将对象类型设置为“nested”可以解决此问题。</p>]]></content>
    
    
    <summary type="html">记录开发过程中遇到的问题及解决办法</summary>
    
    
    
    
    <category term="Java" scheme="https://polar1sssss.github.io/tags/Java/"/>
    
    <category term="项目开发" scheme="https://polar1sssss.github.io/tags/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>谷粒商城项目-分布式组件</title>
    <link href="https://polar1sssss.github.io/2021/07/06/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E5%88%86%E5%B8%83%E5%BC%8F%E7%BB%84%E4%BB%B6/"/>
    <id>https://polar1sssss.github.io/2021/07/06/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E5%88%86%E5%B8%83%E5%BC%8F%E7%BB%84%E4%BB%B6/</id>
    <published>2021-07-06T03:21:45.000Z</published>
    <updated>2021-08-02T04:40:07.407Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud-Alibaba"><a href="#SpringCloud-Alibaba" class="headerlink" title="SpringCloud Alibaba"></a>SpringCloud Alibaba</h1><h2 id="SpringCloud-Alibaba简介"><a href="#SpringCloud-Alibaba简介" class="headerlink" title="SpringCloud Alibaba简介"></a>SpringCloud Alibaba简介</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>SpringCloud Alibaba致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服务的必须组件，方便开发者通过SpringCloud编程模型轻松使用这些组件开发分布式应用服务。</p><p>依托SpringCloud Alibaba，只需要添加注解和少量配置，即可将SpringCloud应用接入阿里微服务解决方案，通过阿里中间件迅速搭建分布式应用系统。</p><h3 id="为什么使用"><a href="#为什么使用" class="headerlink" title="为什么使用"></a>为什么使用</h3><p><strong>SpringCloud痛点：</strong></p><ol><li>SpringCloud部分组件停止维护和更新，给开发带来不便</li><li>SpringCloud部分环境搭建复杂，没有完善的可视化界面，需要大量的二次化开发和定制</li><li>SpringCloud配置复杂，难以上手，部分配置差别难以区分和合理应用</li></ol><p><strong>SpringCloud Alibaba优势：</strong></p><ol><li>组件经历过考验，性能强悍，设计合理，开源</li><li>成套的产品搭配完善的可视化界面，给开发运维带来极大便利</li><li>搭建简单，学习曲线低</li></ol><p><strong>结合SpringCloud Alibaba最终技术搭配方案：</strong></p><ul><li>SpringCloud Alibaba - Nacos：注册中心（服务注册/发现）</li><li>SpringCloud Alibaba - Nacos：配置中心（动态配置管理）</li><li>SpringCloud - Ribbon：负载均衡</li><li>SpringCloud - Feign：声明式HTTP客户端（调用远程服务）</li><li>SpringCloud Alibaba - Sentinel：服务容错（限流，降级，熔断）</li><li>SpringCloud - Gateway：API网管（webflux编程模式）</li><li>SpringCloud - Sleuth：调用链监控</li><li>SpringCloud Alibaba - Seata：分布式事务解决方案</li></ul><h3 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h3><p>SpringBoot版本：2.5.2 </p><p>SpringCloud Alibaba版本：2.2.5.RELEASE</p><p>SpringCloud版本：3.0.3</p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Nacos作为服务注册发现中心"><a href="#Nacos作为服务注册发现中心" class="headerlink" title="Nacos作为服务注册发现中心"></a>Nacos作为服务注册发现中心</h2><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在application.yml中添加注册中心地址及应用名</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gulimall-coupon</span></span><br></pre></td></tr></table></figure></li><li><p>启动类上添加@EnableDiscoveryClient注解</p></li></ol><h2 id="Nacos作为配置中心"><a href="#Nacos作为配置中心" class="headerlink" title="Nacos作为配置中心"></a>Nacos作为配置中心</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在<font style="color:red">bootstrap.yml</font>中添加配置中心地址及应用名</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gulimall-coupon</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br></pre></td></tr></table></figure></li><li><p>在Nacos控制台添加一个数据集（Data Id）默认名字：应用名.properties</p></li><li><p>在应用名.properties中添加配置</p></li><li><p>动态获取配置值：@RefreshScope+@Value(“${配置项名字}”)，如果配置中心和application.yml中配置了相同的项，优先使用配置中心的配置</p></li></ol><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><ol><li><p>命名空间：配置隔离</p><p>默认：public（保留空间），所有新增配置都属于该空间。</p><ul><li><p>开发、测试、生产：利用命名空间做环境配置隔离，需要在bootstrap.yml中加入配置项</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">de2be30a-74ed-4da5-9a0c-40ae2918458c</span></span><br></pre></td></tr></table></figure></li><li><p>每个微服务的配置互相隔离， 每个微服务创建自己的命名空间</p></li></ul></li><li><p>配置集：所有配置的集合</p></li><li><p>配置集ID：类似配置文件名，即nacos中的Data Id</p></li><li><p>配置分组</p><p>默认所有的配置集都属于DEFAULT_GROUP</p></li><li><p>使用场景：每个微服务创建自己的命名空间【namespace】，使用配置分组【group】区分不同的环境</p></li></ol><h2 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h2><h2 id="Seata"><a href="#Seata" class="headerlink" title="Seata"></a>Seata</h2><h2 id="OSS"><a href="#OSS" class="headerlink" title="OSS"></a>OSS</h2><h1 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h1><h2 id="Feign声明式远程调用"><a href="#Feign声明式远程调用" class="headerlink" title="Feign声明式远程调用"></a>Feign声明式远程调用</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>Feign是一个声明式的HTTP客户端，它的目的就是让远程调用更加简单。Feign提供了HTTP请求的模板，通过编写简单的接口和插入注释，就可以定义好HTTP请求的参数、格式、地址等信息。</p><p>Feign整合了Ribbon（负载均衡）和Hystrix（服务熔断），可以让我们不需要显示的使用这两个组件。</p><p>SpringCloudFeign在NetflixFeign的基础上扩展了对SpringMVC注解的支持，在其实现下，只需要创建一个接口并用注解的方式来配置它，即可完成对服务提供方接口的绑定。简化了SpringCloudRibbon自行封装服务调用客户端的开发量。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li><p>引入依赖</p><p>由于SpringCloud Feign在Hoxton.M2 RELEASED版本之后不再使用Ribbon而是使用spring-cloud-loadbalancer，所以不引入spring-cloud-loadbalancer会报错。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>开启feign功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.hujtb.gulimall.member.feign&quot;)</span></span><br></pre></td></tr></table></figure></li><li><p>声明远程接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;gulimall-coupon&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CouponFeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/coupon/coupon/member/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">memberCoupons</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><p>网关作为流量的入口，常用功能包括路由转发、权限校验、限流控制等。而SpringCloud Gateway作为SpringCloud官方推出的第二代网关框架，取代了Zuul网关。</p><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><p>路由、断言、过滤器</p><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在<font style="color:red">bootstrap.yml</font>中添加配置中心地址及应用名</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gulimall-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">d3008965-f60c-493c-a688-9b3ba4a7d8e1</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br></pre></td></tr></table></figure></li><li><p>启动类上面添加@EnableDiscoveryClient注解</p></li><li><p>在application.yml中添加路由规则</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">baidu_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://www.abc.com</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Query=url,</span> <span class="string">baidu</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">bilibili_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://www.bilibili.com/</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Query=url,</span> <span class="string">bilibili</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="网关中配置跨域"><a href="#网关中配置跨域" class="headerlink" title="网关中配置跨域"></a>网关中配置跨域</h3><p>Springboot处理CORS跨域请求的五种方法并且设置过滤器的执行顺序：<a href="https://blog.csdn.net/u011870022/article/details/117932857">https://blog.csdn.net/u011870022/article/details/117932857</a></p><p>配置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置允许跨域请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GulimallCorsConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsWebFilter <span class="title">corsWebFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UrlBasedCorsConfigurationSource urlBasedCorsConfigurationSource = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        CorsConfiguration corsConfiguration = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        <span class="comment">//配置跨域</span></span><br><span class="line">        <span class="comment">/*允许服务端访问的客户端请求头*/</span></span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">/*允许访问的方法名,GET POST等*/</span></span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">/*允许访问的客户端域名*/</span></span><br><span class="line">        corsConfiguration.allowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">/*是否允许请求带有验证信息*/</span></span><br><span class="line">        corsConfiguration.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">        urlBasedCorsConfigurationSource.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, corsConfiguration);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsWebFilter(urlBasedCorsConfigurationSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>前台点击登录按钮时，控制台报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">When allowCredentials is true, allowedOrigins cannot contain the special value &quot;*&quot; since that cannot be set on the &quot;Access-Control-Allow-Origin&quot; response header. To allow credentials to a set of origins, list them explicitly or consider using &quot;allowedOriginPatterns&quot; instead.</span><br></pre></td></tr></table></figure><h2 id="Sleuth-Zipkin服务链路追踪"><a href="#Sleuth-Zipkin服务链路追踪" class="headerlink" title="Sleuth+Zipkin服务链路追踪"></a>Sleuth+Zipkin服务链路追踪</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringCloud-Alibaba&quot;&gt;&lt;a href=&quot;#SpringCloud-Alibaba&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud Alibaba&quot;&gt;&lt;/a&gt;SpringCloud Alibaba&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    
    <category term="Java" scheme="https://polar1sssss.github.io/tags/Java/"/>
    
    <category term="项目开发" scheme="https://polar1sssss.github.io/tags/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>谷粒商城项目-前端开发基础知识</title>
    <link href="https://polar1sssss.github.io/2021/07/06/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://polar1sssss.github.io/2021/07/06/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2021-07-06T03:19:02.000Z</published>
    <updated>2021-07-12T02:17:46.834Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h2 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h2><p>ECMAScript6.0（以下简称ES6，ECMAScript是一种有Ecma国际通过ECMA-262标准化的脚本程序设计语言）是JavaScript语言的下一代标准，它的目标是使得JavaScript语言可以用来编写复杂的大型应用程序，成为企业级开发语言。ECMAScript是浏览器脚本语言的规范，而我们熟知的各种语言如JavaScript，则是规范的具体实现。</p><h2 id="ES6新特性"><a href="#ES6新特性" class="headerlink" title="ES6新特性"></a>ES6新特性</h2><h3 id="let声明变量"><a href="#let声明变量" class="headerlink" title="let声明变量"></a>let声明变量</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var声明的变量会越域</span></span><br><span class="line"><span class="comment">// let声明的变量有严格的局部作用域</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// b is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var可以多次声明变量</span></span><br><span class="line"><span class="comment">// let只能声明一次</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> m = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> n = <span class="number">4</span>;</span><br><span class="line"><span class="comment">// let n = 5;</span></span><br><span class="line"><span class="built_in">console</span>.log(m); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(n); <span class="comment">// Identifier &#x27;n&#x27; has already been declared</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var会变量提升</span></span><br><span class="line"><span class="comment">// let不存在变量提升</span></span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// undefiend</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(y); <span class="comment">// Uncaught ReferenceError: Cannot access &#x27;y&#x27; before initialization</span></span><br><span class="line"><span class="keyword">let</span> y = <span class="number">11</span>;</span><br></pre></td></tr></table></figure><h3 id="const声明常量"><a href="#const声明常量" class="headerlink" title="const声明常量"></a>const声明常量</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明之后不允许改变</span></span><br><span class="line"><span class="comment">// 一旦声明必须初始化，否则会报错</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line">a = <span class="number">3</span>; <span class="comment">// Uncaught TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><h3 id="解构表达式"><a href="#解构表达式" class="headerlink" title="解构表达式"></a>解构表达式</h3><ol><li><p>数组解构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> [a, b, c] = arr;</span><br><span class="line"><span class="built_in">console</span>.log(a, b, c);</span><br></pre></td></tr></table></figure></li><li><p>对象解构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span> : <span class="string">&quot;jack&quot;</span>,</span><br><span class="line">    <span class="attr">age</span> : <span class="number">21</span>,</span><br><span class="line">    <span class="attr">language</span> : [<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;css&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> &#123;<span class="attr">name</span>:abc, age, language&#125; = person;</span><br><span class="line"><span class="built_in">console</span>.log(abc);</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br><span class="line"><span class="built_in">console</span>.log(language);</span><br></pre></td></tr></table></figure></li></ol><h3 id="字符串扩展"><a href="#字符串扩展" class="headerlink" title="字符串扩展"></a>字符串扩展</h3><ol><li><p>几个新的api</p><ul><li>includes()：返回布尔值，表示是否找到参数字符串</li><li>startsWith()：返回布尔值，表示参数字符串是否在原字符串头部</li><li>endsWith()：返回布尔值，表示参数字符串是否在原字符串尾部</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;hello.vue&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">&quot;hello&quot;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(str.endsWith(<span class="string">&quot;.vue&quot;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">&quot;e&quot;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">&quot;hello&quot;</span>));</span><br></pre></td></tr></table></figure></li><li><p>字符串模版</p><p>模版字符串相当于加强版的字符串，用反引号（Esc下面），除了作为普通字符串，还可以用来定义多行字符串，还可以在字符串中加入变量和表达式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.多行字符串</span></span><br><span class="line"><span class="keyword">let</span> ss = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt; </span></span><br><span class="line"><span class="string">&lt;span&gt;hello world&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="built_in">console</span>.log(ss);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.字符串插入变量和表达式。变量名写在$&#123;&#125;中，$&#123;&#125;中可以放入JavaScript表达式</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">14</span>;</span><br><span class="line"><span class="keyword">let</span> info = <span class="string">&quot;我是$&#123;name&#125;, 今年$&#123;age&#125;岁了&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.字符串中调用函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;this is a function&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> sss = <span class="string">&quot;haha, $&#123;fun()&#125;&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(sss);</span><br></pre></td></tr></table></figure></li></ol><h3 id="函数优化"><a href="#函数优化" class="headerlink" title="函数优化"></a>函数优化</h3><ol><li><p>函数参数默认值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在ES6之前，无法给一个函数参数设置默认值，只能采用变通写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    b = b || <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6可以直接给参数加上默认值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add2</span>(<span class="params">a, b = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span>);</span><br></pre></td></tr></table></figure></li><li><p>不定参数</p><p>不定参数用来表示不确定参数个数，形如…变量名，由…加上一个具名参数标识符组成。具名参数只能放在参数列表的最后，并且有且只有一个不定参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">...values</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(values.length);</span><br><span class="line">&#125;</span><br><span class="line">fun(<span class="number">1</span>,<span class="number">2</span>); <span class="comment">// 2</span></span><br><span class="line">fun(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure></li><li><p>箭头函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个参数</span></span><br><span class="line"><span class="keyword">var</span> print = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> print = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="built_in">console</span>.log(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个参数</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当只有一行语句，并且需要返回结果时，可以省略&#123;&#125;，结果会自动返回</span></span><br><span class="line"><span class="keyword">var</span> sum2 = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"><span class="built_in">console</span>.log(sum2(<span class="number">10</span>, <span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当有多行语句</span></span><br><span class="line"><span class="keyword">var</span> sum3 = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    c = a + b;</span><br><span class="line">    <span class="keyword">return</span> a + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结合解构表达式</span></span><br><span class="line"><span class="keyword">var</span> hello2 = <span class="function">(<span class="params">&#123;name&#125;</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;hello,&quot;</span> + name);</span><br><span class="line">hello2(person);</span><br></pre></td></tr></table></figure></li></ol><h3 id="对象优化"><a href="#对象优化" class="headerlink" title="对象优化"></a>对象优化</h3><ol><li><p>新增API</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 快捷获取属性和值</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span> : <span class="string">&quot;jack&quot;</span>,</span><br><span class="line">    <span class="attr">age</span> : <span class="number">21</span>,</span><br><span class="line">    <span class="attr">language</span> : [<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;css&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(person)); <span class="comment">// [&quot;name&quot;, &quot;age&quot;, &quot;language&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(person)); <span class="comment">// [&quot;jack&quot;, &quot;age&quot;, &quot;language&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(person)); <span class="comment">// [Array(2), Array(2), Array(2)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并对象</span></span><br><span class="line"><span class="keyword">const</span> target = &#123;<span class="attr">a</span> : <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> source1 = &#123;<span class="attr">b</span> : <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> soruce2 = &#123;<span class="attr">c</span> : <span class="number">3</span>&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(target, source1, source2);</span><br></pre></td></tr></table></figure></li><li><p>声明对象简写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">12</span>;</span><br><span class="line"><span class="comment">// 传统</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;<span class="attr">age</span> : age, <span class="attr">name</span> : name&#125;;</span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;age, name&#125;;</span><br></pre></td></tr></table></figure></li><li><p>对象函数属性简写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span> : <span class="string">&quot;jack&quot;</span>,</span><br><span class="line">    <span class="comment">// 以前</span></span><br><span class="line">    <span class="attr">eat</span>: <span class="function"><span class="keyword">function</span>(<span class="params">food</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot;在吃&quot;</span> + food);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 箭头函数版，不能用this</span></span><br><span class="line">    <span class="attr">eat2</span>: <span class="function"><span class="params">food</span> =&gt;</span> <span class="built_in">console</span>.log(person.name + <span class="string">&quot;在吃&quot;</span> + food),</span><br><span class="line">    <span class="comment">// 简写版</span></span><br><span class="line">    <span class="function"><span class="title">eat3</span>(<span class="params">food</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot;在吃&quot;</span> + food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.eat(<span class="string">&quot;肉&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>对象扩展运算符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.拷贝对象</span></span><br><span class="line"><span class="keyword">let</span> person1 = &#123;<span class="attr">name</span> : <span class="string">&quot;Amy&quot;</span>, <span class="attr">age</span> : <span class="number">15</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> someone = &#123;...person1&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.合并对象</span></span><br><span class="line"><span class="keyword">let</span> age = &#123;<span class="attr">age</span> : <span class="number">15</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> name = &#123;<span class="attr">name</span> : <span class="string">&quot;Amy&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> person2 = &#123;<span class="attr">name</span> : <span class="string">&quot;zhangsan&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> person2 = &#123;...age, ...name&#125;; <span class="comment">// 如果两个对象属性名重复，后面会覆盖前面 &#123;age:15, name:&quot;Amy&quot;&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="map和reduce"><a href="#map和reduce" class="headerlink" title="map和reduce"></a>map和reduce</h3><p>map()：接收一个函数，将原数组所有元素用这个函数处理后放入新数组返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;-5&#x27;</span>, <span class="string">&#x27;3&#x27;</span>];</span><br><span class="line">arr = arr.map(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>reduce()：为数组中每个元素执行回调函数，不包括数组中被删除或从未被赋值的元素。语法：arr.reduce(callback, [initialValue])。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.previousValue：上一次调用回调函数返回的值，或者是提供的初始值（initialValue）</span></span><br><span class="line"><span class="comment"> * 2.currentValue：数组中当前被处理的元素</span></span><br><span class="line"><span class="comment"> * 3.index：当前元素在数组中的索引</span></span><br><span class="line"><span class="comment"> * 4.array：调用reduce的数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;-5&#x27;</span>, <span class="string">&#x27;3&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> result = arr.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;上一次处理后：&quot;</span> + a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;当前正在处理：&quot;</span> + b)</span><br><span class="line">   <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>在JavaScript的世界中，所有代码都是单线程执行的。由于这个“缺陷”，导致JavaScript的所有网络操作，浏览器事件，都必须是异步执行。异步执行可以用回调函数实现。一旦有一连串的ajax请求，后面的请求依赖于前面请求的结果，就需要层层嵌套。这种缩进和层层嵌套的方式，非常容易造成上下文代码混乱。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 案例：用户登录，并展示用户的各科成绩</span></span><br><span class="line"><span class="comment"> * 1.查询用户，查询成功说明可以登录</span></span><br><span class="line"><span class="comment"> * 2.查询用户成功，查询科目</span></span><br><span class="line"><span class="comment"> * 3.根据科目的查询结果，获取成绩</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 传统</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">   <span class="attr">url</span>:<span class="string">&quot;mock/user.json&quot;</span>,</span><br><span class="line">    <span class="function"><span class="title">success</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;查询到用户：&quot;</span>, data);</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">`mock/user_course_<span class="subst">$&#123;data.id&#125;</span>.json`</span>,</span><br><span class="line">            <span class="function"><span class="title">success</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;查询到课程：&quot;</span>, data);</span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    <span class="attr">url</span>: <span class="string">`mock/course_score_<span class="subst">$&#123;data.id&#125;</span>.json`</span>,</span><br><span class="line">                    <span class="function"><span class="title">success</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&quot;查询到分数：&quot;</span>, data);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="function"><span class="title">error</span>(<span class="params">error</span>)</span> &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&quot;出现异常：&quot;</span> + error);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// promise版 </span></span><br><span class="line"><span class="comment">// promise简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            <span class="attr">url</span>: url,</span><br><span class="line">            <span class="attr">data</span>: data,</span><br><span class="line">            <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                resolve(data);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">                reject(error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">get(<span class="string">&quot;mock/user.json&quot;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;查询用户成功：&quot;</span> + data);</span><br><span class="line">    <span class="keyword">return</span> get(<span class="string">`mock/user_course_<span class="subst">$&#123;data.id&#125;</span>.json`</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;查询课程成功：&quot;</span> + data);</span><br><span class="line">    <span class="keyword">return</span> get(<span class="string">`mock/course_score_<span class="subst">$&#123;data.id&#125;</span>.json`</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;课程成绩：&quot;</span> + data);</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;出现异常：&quot;</span> + err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*user.json*/</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*user_course_2.json*/</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span> : <span class="number">10</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;chinese&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*course_score_10*/</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;score&quot;</span> : <span class="number">100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><ol><li><p>什么是模块化</p><p>模块化就是把代码进行拆分，方便重复利用。类似java中的导包，js中没有包的概念，换来的是模块。</p><p>模块功能主要由两个命令构成，<code>export</code>和<code>import</code></p><ul><li>export命令用于规定模块的对外接口</li><li>import命令用于导入其他模块提供的功能</li></ul></li><li><p>export&amp;import</p><p>hello.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util = &#123;</span><br><span class="line">    <span class="function"><span class="title">sum</span>(<span class="params">a, b</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;util&#125;</span><br></pre></td></tr></table></figure><p>user.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">21</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;name, age&#125;</span><br></pre></td></tr></table></figure><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> util <span class="keyword">from</span> <span class="string">&quot;./hello.js&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123;name, age&#125; <span class="keyword">from</span> <span class="string">&quot;./user.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(util.sum(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"><span class="built_in">console</span>.log(name + <span class="string">&quot;&quot;</span> + age);</span><br></pre></td></tr></table></figure></li></ol><h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h1><p>Node.js是一个基于Chrome V8引擎的JavaScript运行环境：<a href="http://nodejs.cn/api%E3%80%82">http://nodejs.cn/api。</a></p><p>npm是随同Node.js一起安装的包管理工具，JavaScript-nmp类似Java-Maven。</p><ol><li>官网下载Node.js并安装，使用node -v检查是否安装成功</li><li>配置npm使用淘宝镜像：npm config set registry <a href="http://registry.npm.taobao.org/">http://registry.npm.taobao.org</a></li></ol><h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h2 id="MVVM思想"><a href="#MVVM思想" class="headerlink" title="MVVM思想"></a>MVVM思想</h2><ul><li>M：即Model，模型，包括数据和一些基本操作</li><li>V：即View，视图，页面渲染效果</li><li>VM：即View-Model，模型与视图之间的双向操作</li></ul><p>在MVVM之前，开发人员从后端获取需要的数据模型，然后要通过DOM操作Model渲染到View中。而后当用户操作视图，我们还需要通过DOM获取View中的数据，然后同步到Model中。而VM要做的事情就是把DOM操作完全封装起来，开发人员不用再关心Model和View之间是如何相互影响的：Model发生改变，View上自然也会表现出来；当用户修改了View，Model中的数据也会跟着改变。</p><h2 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;num&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;num++&quot;</span>&gt;</span>点赞<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;cancel()&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125;,非常帅,有&#123;&#123;num&#125;&#125;个人给他点赞<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1.vue声明式渲染</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2.双向绑定，模型变化，视图变化，反之亦然</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 3.事件处理</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">num</span>: <span class="number">1</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">cancel</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.num--;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h3><ol><li><p>花括号</p><p>格式：<code>&#123;&#123;表达式&#125;&#125;</code>，只能用于标签体中</p><p>说明：</p><ul><li><p>该表达式支持JS语法，可以调用JS内置函数（必须有返回值）</p></li><li><p>表达式必须有返回结果。如1+1，否则不允许使用</p></li><li><p>可以直接获取Vue实例中定义的数据和函数</p></li></ul></li><li><p>插值闪烁</p><p>使用<code>&#123;&#123;&#125;&#125;`方式在网速较慢时会出现问题。在数据未加载完成时，页面会显示原始的`&#123;&#123;&#125;&#125;</code>，加载完毕后才会显示正确数据，成为插值闪烁。</p></li><li><p>v-text和v-html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;msg&#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用下面两种不会出现插值闪烁--&gt;</span>&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">msg</span>: <span class="string">&quot;&lt;h1&gt;abc&lt;/h1&gt;&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p>给html标签的属性绑定值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;link&quot;</span>&gt;</span>gogogo<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--属性值为true属性存在，反之不存在--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123;active:isActive,&#x27;text-danger&#x27;:hasError&#125;&quot;</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;&#123;color:color1, fontSize:size&#125;&quot;</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">link</span>: <span class="string">&quot;http://www.baidu.com&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">isActive</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">hasError</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">color1</span>: <span class="string">&#x27;red&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">size</span>: <span class="string">&#x27;36px&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>双向绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;language&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Java&quot;</span>&gt;</span> Java<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;language&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PHP&quot;</span>&gt;</span> PHP<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;language&quot;</span> <span class="attr">value</span>=<span class="string">&quot;JS&quot;</span>&gt;</span> JS<span class="tag">&lt;<span class="name">br</span>/&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">language</span>: []</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><p>事件绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--事件修饰符--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border:1px solid red;padding: 20px;&quot;</span> <span class="attr">v-on:click.once</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">        大DIV</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border:1px solid blue;padding:20px;&quot;</span> @<span class="attr">click.stop</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">            小div</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> @<span class="attr">click.prevent.stop</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>去百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--按键修饰符，按向上键加2，向下键减二，ctrl+鼠标左键变成10--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;num&quot;</span> <span class="attr">v-on:keyup.up</span>=<span class="string">&quot;num+=2&quot;</span> @<span class="attr">keyup.down</span>=<span class="string">&quot;num-=2&quot;</span> @<span class="attr">click.ctrl</span>=<span class="string">&quot;num=10&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">num</span>: <span class="number">1</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">hello</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&quot;点击了&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p>遍历元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(user, index) in users&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;user.name&quot;</span>&gt;</span></span><br><span class="line">            当前索引：&#123;&#123;index&#125;&#125; ==&gt; &#123;&#123;user.name&#125;&#125; ==&gt; &#123;&#123;user.age&#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            对象信息：</span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;(v, k, i) in user&quot;</span>&gt;</span>&#123;&#123;k&#125;&#125; == &#123;&#123;v&#125;&#125; == &#123;&#123;i&#125;&#125;;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--1、显示user信息：v-for=&quot;item in items&quot;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--2、获取数组下标：v-for=&quot;(item, index) in items&quot;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--3、遍历对象：</span></span><br><span class="line"><span class="comment">            v-for=&quot;value in object&quot;</span></span><br><span class="line"><span class="comment">            v-for=&quot;(value, key) in object&quot;</span></span><br><span class="line"><span class="comment">            v-for=&quot;(value, key, index) in object&quot;</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--4、遍历时加上:key来区分不同的数据，提高vue渲染效率--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">users</span>: [</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>: <span class="string">&#x27;a&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>: <span class="string">&#x27;b&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>: <span class="string">&#x27;c&#x27;</span>, <span class="attr">age</span>: <span class="number">15</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>: <span class="string">&#x27;d&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>: <span class="string">&#x27;e&#x27;</span>, <span class="attr">age</span>: <span class="number">201</span>&#125;,</span></span><br><span class="line"><span class="javascript">            ]</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-if和v-show"><a href="#v-if和v-show" class="headerlink" title="v-if和v-show"></a>v-if和v-show</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show = !show&quot;</span>&gt;</span>点我呀<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--v-if值为false：直接将元素置空--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--v-show为false：添加display:none属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>if看到我<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;show&quot;</span>&gt;</span>show看到我<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;random=Math.random()&quot;</span>&gt;</span>点我呀2<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;random&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;random&gt;=0.75&quot;</span>&gt;</span></span><br><span class="line">        大于等于0.75</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">&quot;random&gt;=0.5&quot;</span>&gt;</span></span><br><span class="line">        大于等于0.5</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">&quot;random&gt;0.2&quot;</span>&gt;</span></span><br><span class="line">        大于等于0.2</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">        小于0.2</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">show</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">random</span>: <span class="number">0</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="计算属性和侦听器"><a href="#计算属性和侦听器" class="headerlink" title="计算属性和侦听器"></a>计算属性和侦听器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span> 西游记；价格：&#123;&#123;xyjPrice&#125;&#125;，数量 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;xyjNum&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span> 水浒传；价格：&#123;&#123;shzPrice&#125;&#125;，数量 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;shzNum&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>总价：&#123;&#123;totalPrice&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;&#123;msg&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">xyjPrice</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">shzPrice</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">xyjNum</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">shzNum</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">msg</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 计算属性</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">totalPrice</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="built_in">this</span>.xyjPrice * <span class="built_in">this</span>.xyjNum + <span class="built_in">this</span>.shzPrice * <span class="built_in">this</span>.shzNum</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 监听器</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">xyjNum</span>: <span class="function"><span class="keyword">function</span>(<span class="params">newValue, oldValue</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// alert(oldValue + &quot;==&gt;&quot; + newValue);</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (newValue &gt;= <span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.xyjNum = <span class="number">3</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.msg = <span class="string">&quot;库存超出限制&quot;</span>;</span></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.msg = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;user in users&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;user.id&#125;&#125; -- &#123;&#123;user.name&#125;&#125; -- &#123;&#123;user.gender | gFilter&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 全局过滤器</span></span></span><br><span class="line"><span class="javascript">    Vue.filter(<span class="string">&quot;gFilter&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (val == <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="string">&#x27;男&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="string">&#x27;女&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">users</span>: [&#123;<span class="attr">id</span>: <span class="number">1</span>,<span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,<span class="attr">gender</span>: <span class="number">1</span>&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>: <span class="number">1</span>,<span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>,<span class="attr">gender</span>: <span class="number">0</span>&#125;]</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 局部过滤器</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">filters</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">genderFilter</span>(<span class="params">val</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (val == <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="string">&#x27;男&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="string">&#x27;女&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><ul><li><p>组件也是一个Vue实例，因此它在定义时也会接受：data、methods声明周期函数等</p></li><li><p>不同的是组件不会与页面元素绑定，否则就无法复用了，因此没有el属性</p></li><li><p>组件渲染需要HTML模板，所以增加了template属性</p></li><li><p>全局组件定义完毕，任何Vue实例都可以直接在HTML中通过组件名称来使用组件</p></li><li><p>data是一个函数，而不是一个对象，保证每个组件之间的隔离性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;num++&quot;</span>&gt;</span>我被点击了&#123;&#123;num&#125;&#125;次<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1.全局声明注册一个组件</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;counter&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: <span class="string">`&lt;button @click=&quot;num++&quot;&gt;我被点击了&#123;&#123;num&#125;&#125;次&lt;/button&gt;`</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">num</span> : <span class="number">0</span></span></span><br><span class="line"><span class="javascript">            &#125; </span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2.局部声明一个组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> buttonCounter = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: <span class="string">`&lt;button @click=&quot;num++&quot;&gt;我被点击了&#123;&#123;num&#125;&#125;次&lt;/button&gt;`</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">num</span> : <span class="number">0</span></span></span><br><span class="line"><span class="javascript">            &#125; </span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">num</span>: <span class="number">0</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="string">&#x27;button-counter&#x27;</span>: buttonCounter</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="生命周期钩子函数"><a href="#生命周期钩子函数" class="headerlink" title="生命周期钩子函数"></a>生命周期钩子函数</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;num1&quot;</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;num++&quot;</span>&gt;</span>赞~<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;, &#123;&#123;num&#125;&#125;个人给你点赞<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">num</span>: <span class="number">0</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">show</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>.name;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">add</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.num++;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;========beforeCreate=========&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;数据模型未加载：&quot;</span> + <span class="built_in">this</span>.name, <span class="built_in">this</span>.num);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;方法未加载：&quot;</span> + <span class="built_in">this</span>.show());</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;html模版未加载：&quot;</span> + <span class="built_in">document</span>.getElementById(<span class="string">&quot;num1&quot;</span>));</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;========created=========&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;数据模型已加载：&quot;</span> + <span class="built_in">this</span>.name, <span class="built_in">this</span>.num);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;方法已加载：&quot;</span> + <span class="built_in">this</span>.show());</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;html模版已加载：&quot;</span> + <span class="built_in">document</span>.getElementById(<span class="string">&quot;num1&quot;</span>));</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;html模版未渲染：&quot;</span> + <span class="built_in">document</span>.getElementById(<span class="string">&quot;num1&quot;</span>).innerText);</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">beforeMount</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;========beforeMount=========&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;html模版未渲染：&quot;</span> + <span class="built_in">document</span>.getElementById(<span class="string">&quot;num1&quot;</span>).innerText);</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;========mounted=========&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;html模版已渲染：&quot;</span> + <span class="built_in">document</span>.getElementById(<span class="string">&quot;num1&quot;</span>).innerText);</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">beforeUpdate</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;========beforeUpdate=========&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;数据模型已更新：&quot;</span> + <span class="built_in">this</span>.num);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;html模版未渲染：&quot;</span> + <span class="built_in">document</span>.getElementById(<span class="string">&quot;num1&quot;</span>).innerText);</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">updated</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;========updated=========&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;数据模型已更新：&quot;</span> + <span class="built_in">this</span>.num);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;html模版已渲染：&quot;</span> + <span class="built_in">document</span>.getElementById(<span class="string">&quot;num1&quot;</span>).innerText);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="vue模块化开发"><a href="#vue模块化开发" class="headerlink" title="vue模块化开发"></a>vue模块化开发</h2><h3 id="npm-install-webpack-g"><a href="#npm-install-webpack-g" class="headerlink" title="npm install webpack -g"></a>npm install webpack -g</h3><p>全局安装webpack</p><h3 id="npm-install-g-vue-cli-init"><a href="#npm-install-g-vue-cli-init" class="headerlink" title="npm install -g @vue/cli-init"></a>npm install -g @vue/cli-init</h3><p>全局安装vue脚手架</p><h3 id="初始化vue项目"><a href="#初始化vue项目" class="headerlink" title="初始化vue项目"></a>初始化vue项目</h3><p>vue init webpack appname：vue脚手架使用webpack模板初始化一个appname项目</p><h3 id="启动vue项目"><a href="#启动vue项目" class="headerlink" title="启动vue项目"></a>启动vue项目</h3><p>项目的package.json中有scripts，代表我们能运行的命令</p><p>npm start = npm run dev：启动项目</p><h1 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h1><h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h1&gt;&lt;h2 id=&quot;ECMAScript&quot;&gt;&lt;a href=&quot;#ECMAScript&quot; class=&quot;headerlink&quot; title=&quot;E</summary>
      
    
    
    
    
    <category term="项目开发" scheme="https://polar1sssss.github.io/tags/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/"/>
    
    <category term="JavaScript" scheme="https://polar1sssss.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>谷粒商城项目-前置知识及环境搭建</title>
    <link href="https://polar1sssss.github.io/2021/07/02/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://polar1sssss.github.io/2021/07/02/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2021-07-02T09:10:07.000Z</published>
    <updated>2021-07-29T09:55:52.561Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h1><h2 id="项目架构图"><a href="#项目架构图" class="headerlink" title="项目架构图"></a>项目架构图</h2><h3 id="项目微服务架构图"><a href="#项目微服务架构图" class="headerlink" title="项目微服务架构图"></a>项目微服务架构图</h3><p><img src="https://cdn.jsdelivr.net/gh/Polar1sssss/FigureBed/img/guli001.png"></p><h3 id="微服务划分图"><a href="#微服务划分图" class="headerlink" title="微服务划分图"></a>微服务划分图</h3><p><img src="https://cdn.jsdelivr.net/gh/Polar1sssss/FigureBed/img/guli002.png"></p><h1 id="分布式基础概念"><a href="#分布式基础概念" class="headerlink" title="分布式基础概念"></a>分布式基础概念</h1><h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><h2 id="集群-amp-分布式-amp-节点"><a href="#集群-amp-分布式-amp-节点" class="headerlink" title="集群&amp;分布式&amp;节点"></a>集群&amp;分布式&amp;节点</h2><ul><li><p>集群是个物理形态，分布式是个工作方式。</p></li><li><p>分布式是指不同的业务分布在不同的地方；集群指的是将几台服务器集中在一起，实现同一业务。</p></li><li><p>分布式中的每个节点，都可以做集群；而集群不一定就是分布式。</p></li></ul><h2 id="远程调用"><a href="#远程调用" class="headerlink" title="远程调用"></a>远程调用</h2><p>在分布式系统中，各个服务可能处于不同的主机，服务之间不可避免需要互相调用，称为远程调用。SpringCloud中使用HTTP + JSON完成远程调用。</p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>常见的负载均衡算法：</p><p>轮询：为第一个请求选择健康池中的第一个后端服务器，后续请求按照顺序依次选择服务器，直到最后一个，之后循环。</p><p>最小连接数：优先选择连接数最少的服务器。在会话较长的情况下可以考虑采用这种方式。</p><p>散列：根据请求源IP的散列（hash）来选择要转发的服务器。这种方式可以一定程度上保证特定用户能够连接到相同的服务器。如果应用需要处理状态而要求用户能够连接到与之前相同的服务器，可以考虑这种方式。</p><h2 id="服务注册-发现-amp-注册中心"><a href="#服务注册-发现-amp-注册中心" class="headerlink" title="服务注册/发现&amp;注册中心"></a>服务注册/发现&amp;注册中心</h2><p>A服务调用B服务，A服务想要知道B服务处在哪几台服务器以及服务器的状态，需要引入注册中心。如果某些服务已下线，可以感知到服务器状态的变化，从而避免调用不可用的服务。</p><h2 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h2><h2 id="服务熔断-amp-服务降级"><a href="#服务熔断-amp-服务降级" class="headerlink" title="服务熔断&amp;服务降级"></a>服务熔断&amp;服务降级</h2><ul><li>服务熔断：设置服务超时时间，当被调用的服务失败次数达到某个阈值，直接开启断路保护机制，后续的请求不再去调用这个服务，本地直接返回默认的数据。</li><li>服务降级：在运维期间，当系统处于高峰期，系统资源紧张，可以让某些非核心业务降级运行。降级：某些服务不处理，或者简单处理（抛异常、返回NULL、调用Mock数据、调用Fallback处理逻辑）。</li></ul><h2 id="API网关"><a href="#API网关" class="headerlink" title="API网关"></a>API网关</h2><p>API网关抽象了微服务中都需要的功能，同时提供了客户端负载均衡，服务自动熔断，灰度发布，统一认证，限流流控，日志统计等丰富的功能。</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="安装Linux虚拟机"><a href="#安装Linux虚拟机" class="headerlink" title="安装Linux虚拟机"></a>安装Linux虚拟机</h2><ul><li><p>安装VirtualBox，需要开启CPU虚拟化</p></li><li><p>下载&amp;安装Vagrant</p><ul><li><a href="https://app.vagrantup.com/boxes/search">https://app.vagrantup.com/boxes/search</a> Vagrant官方镜像仓库</li><li><a href="https://www.vagrantup.com/download.html">https://www.vagrantup.com/download.html</a> Vagrant下载</li></ul></li><li><p>打开window cmd窗口，运行Vagrant init centos/7，即可初始化一个centos7系统</p></li><li><p>运行vagrant up即可开启虚拟机。系统root用户密码是vagrant</p></li><li><p>vagrant up执行很慢解决办法：手动下载CentOS-7-x86_64-Vagrant-2004_01.VirtualBox.box，cd到文件所在目录，执行如下命令：vagrant box add centos/7 CentOS-7-x86_64-Vagrant-2004_01.VirtualBox.box。</p></li><li><p>vagrant其他命令</p><ul><li>vagrant ssh：自动使用vagrant用户连接虚拟机<ul><li>vagrant upload source [destination] [name|id]：上传文件</li></ul></li><li><a href="https://www.vagrantup.com/docs/cli/init.html">https://www.vagrantup.com/docs/cli/init.html</a> Vagrant命令行</li></ul></li><li><p>默认虚拟机ip不是固定ip，修改Vagrantfile</p><ul><li>config.vm.network “private_network”,ip:”xxx.xxx.xxx.xxx”，ip地址需要在物理机下使用ipconfig命令获得VirtualBox Host-Only Network的地址</li></ul></li></ul><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>Docker安装文档：<a href="https://docs.docker.com/install/linux/docker-ce/centos">https://docs.docker.com/install/linux/docker-ce/centos</a></p><ol><li><p>卸载系统之前的docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine</span><br></pre></td></tr></table></figure></li><li><p>设置仓库地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li><li><p>安装docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li><li><p>启动docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure></li><li><p>设置开机自启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure></li><li><p>设置阿里云加速</p><p>阿里云-控制台-产品与服务-容器镜像服务-镜像加速器-centos</p></li></ol><h2 id="docker安装mysql"><a href="#docker安装mysql" class="headerlink" title="docker安装mysql"></a>docker安装mysql</h2><ol><li><p>下载mysql镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull mysql:5.7</span><br></pre></td></tr></table></figure></li><li><p>创建实例并启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql -v /mydata/mysql/<span class="built_in">log</span>:/var/<span class="built_in">log</span>/mysql -v /mydata/mysql/data:/var/lib/mysql -v /mydata/mysql/conf:/etc/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7 </span><br></pre></td></tr></table></figure><p>参数说明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-p 3306:3306：将容器的3306端口映射到主机的3306端口</span><br><span class="line">-v /mydata/mysql/log:/var/log/mysql：将日志文件夹挂载到主机（主机:容器）</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql：将数据文件夹挂载到主机</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql：将配置文件夹挂载到主机</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root：初始化root用户密码</span><br><span class="line">-d mysql:5.7：后台运行，以mysql:5.7启动容器</span><br></pre></td></tr></table></figure><p>mysql配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /mydata/mysql/conf/my.cnf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set=utf-8</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf-8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">init-connect=&#x27;SET collation_connection=utf8_unicode_ci&#x27;</span><br><span class="line">init-connect=&#x27;SET NAMES utf8&#x27;</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_unicode_ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line"># 跳过域名解析，解决mysql连接慢的问题</span><br><span class="line">skip-name-resolve</span><br></pre></td></tr></table></figure></li><li><p>进入mysql容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mysql /bin/bash</span><br></pre></td></tr></table></figure></li><li><p>设置开机自启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update mysql --restart=always</span><br></pre></td></tr></table></figure></li></ol><h2 id="docker安装redis"><a href="#docker安装redis" class="headerlink" title="docker安装redis"></a>docker安装redis</h2><ol><li><p>下载redis镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure></li><li><p>创建实例并启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /mydata/redis/conf</span><br><span class="line">touch /mydata/redis/conf/redis.conf</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 6379:6379 --name redis -v /mydata/redis/data:/data -v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf -d redis redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure><p>redis自描述文件：<a href="https://raw.githubusercontent.com/antirez/redis/4.0/redis.conf">https://raw.githubusercontent.com/antirez/redis/4.0/redis.conf</a></p></li><li><p>使用redis镜像执行redis-cli命令连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it redis redis-cli</span><br></pre></td></tr></table></figure></li><li><p>设置开机自启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update redis --restart=always</span><br></pre></td></tr></table></figure></li></ol><h2 id="开发环境统一"><a href="#开发环境统一" class="headerlink" title="开发环境统一"></a>开发环境统一</h2><h3 id="JDK和Maven"><a href="#JDK和Maven" class="headerlink" title="JDK和Maven"></a>JDK和Maven</h3><h3 id="Visual-Code插件安装"><a href="#Visual-Code插件安装" class="headerlink" title="Visual Code插件安装"></a>Visual Code插件安装</h3><h3 id="安装配置git"><a href="#安装配置git" class="headerlink" title="安装配置git"></a>安装配置git</h3><ol><li><p>下载安装git：<a href="http://git-scm.com/">http://git-scm.com</a></p></li><li><p>配置git，进入git bash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 配置用户名</span><br><span class="line">git config --global user.name &quot;xxxx&quot;</span><br><span class="line"># 配置邮箱</span><br><span class="line">git config --global user.email &quot;xxxx@xxx.com&quot;</span><br></pre></td></tr></table></figure></li><li><p>配置ssh免密登录</p><p><a href="https://gitee.com/help/articles/4181#article-header0">https://gitee.com/help/articles/4181#article-header0</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">进入git bash</span><br><span class="line">执行命令：ssh-keygen -t rsa -C <span class="string">&quot;xxxx@xxx.com&quot;</span>命令，连续三次回车，用户目录下会生成id_rsa和id_rsa.pub文件，使用cat ~/.ssh/id_rsa.pub查看内容</span><br><span class="line">登录gitee或github，在设置中找到SSH KEY，将id_rsa.pub中的内容粘贴进去</span><br><span class="line">使用ssh -T git@github.com测试是否成功</span><br></pre></td></tr></table></figure></li></ol><h3 id="逆向工程使用"><a href="#逆向工程使用" class="headerlink" title="逆向工程使用"></a>逆向工程使用</h3><ol><li><p>导入项目逆向工程</p><p>git clone <a href="https://gitee.com/renrenio/renren-generator.git">https://gitee.com/renrenio/renren-generator.git</a></p></li><li><p>下载人人开源后台管理系统脚手架工程</p><ol><li>导入工程，创建数据库</li><li>将工程中shiro依赖改为Spring Security</li></ol></li><li><p>下载人人开源后台管理系统vue端脚手架工程</p><ol><li>vscode导入前端项目</li><li>前后端联调测试基本功能</li></ol></li></ol><h2 id="创建项目微服务"><a href="#创建项目微服务" class="headerlink" title="创建项目微服务"></a>创建项目微服务</h2><p>商品服务、仓储服务、订单服务、优惠券服务、用户服务</p><h3 id="在github上创建仓库gulimall"><a href="#在github上创建仓库gulimall" class="headerlink" title="在github上创建仓库gulimall"></a>在github上创建仓库gulimall</h3><h3 id="克隆项目到本地"><a href="#克隆项目到本地" class="headerlink" title="克隆项目到本地"></a>克隆项目到本地</h3><h3 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建模块</h3><ol><li>导入web、openfeign</li><li>服务包名：com.hujtb.gulimall.xxx(product/order/ware/coupon/member)</li><li>模块名：gulimall-xxx</li></ol><h3 id="给root项目添加pom-xml"><a href="#给root项目添加pom-xml" class="headerlink" title="给root项目添加pom.xml"></a>给root项目添加pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hujtb.gulimall<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gulimall<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>gulimall<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>聚合服务<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>gulimall-coupon<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>gulimall-member<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>gulimall-order<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>gulimall-product<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>gulimall-ware<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修改-gitignore文件"><a href="#修改-gitignore文件" class="headerlink" title="修改.gitignore文件"></a>修改.gitignore文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">target/</span><br><span class="line">pom.xml.tag</span><br><span class="line">pom.xml.releaseBackup</span><br><span class="line">pom.xml.versionsBackup</span><br><span class="line">pom.xml.next</span><br><span class="line">release.properties</span><br><span class="line">dependency-reduced-pom.xml</span><br><span class="line">buildNumber.properties</span><br><span class="line">.mvn/timing.properties</span><br><span class="line"># https://github.com/takari/maven-wrapper#usage-without-binary-jar</span><br><span class="line">.mvn/wrapper/maven-wrapper.jar</span><br><span class="line"></span><br><span class="line">**/mvnw</span><br><span class="line">**/mvnw.cmd</span><br><span class="line"></span><br><span class="line">**/.mvn</span><br><span class="line">**/target/</span><br><span class="line"></span><br><span class="line">.idea</span><br><span class="line"></span><br><span class="line">**/.gitignore</span><br></pre></td></tr></table></figure><h3 id="提交初始化项目到github"><a href="#提交初始化项目到github" class="headerlink" title="提交初始化项目到github"></a>提交初始化项目到github</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;项目简介&quot;&gt;&lt;a href=&quot;#项目简介&quot; class=&quot;headerlink&quot; title=&quot;项目简介&quot;&gt;&lt;/a&gt;项目简介&lt;/h1&gt;&lt;h2 id=&quot;项目架构图&quot;&gt;&lt;a href=&quot;#项目架构图&quot; class=&quot;headerlink&quot; title=&quot;项目架构图&quot;&gt;</summary>
      
    
    
    
    
    <category term="Java" scheme="https://polar1sssss.github.io/tags/Java/"/>
    
    <category term="项目开发" scheme="https://polar1sssss.github.io/tags/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>网站收藏</title>
    <link href="https://polar1sssss.github.io/2021/06/10/%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/"/>
    <id>https://polar1sssss.github.io/2021/06/10/%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/</id>
    <published>2021-06-10T10:26:14.000Z</published>
    <updated>2021-06-16T09:56:14.448Z</updated>
    
    <content type="html"><![CDATA[<h2 id="不死鸟-分享为王"><a href="#不死鸟-分享为王" class="headerlink" title="不死鸟 分享为王"></a>不死鸟 分享为王</h2><p>分享一些不错的资源：<a href="https://iao.su/">https://iao.su/</a></p><h2 id="编程导航"><a href="#编程导航" class="headerlink" title="编程导航"></a>编程导航</h2><p>程序员必备网站：<a href="https://www.code-nav.cn/">https://www.code-nav.cn/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;不死鸟-分享为王&quot;&gt;&lt;a href=&quot;#不死鸟-分享为王&quot; class=&quot;headerlink&quot; title=&quot;不死鸟 分享为王&quot;&gt;&lt;/a&gt;不死鸟 分享为王&lt;/h2&gt;&lt;p&gt;分享一些不错的资源：&lt;a href=&quot;https://iao.su/&quot;&gt;https://ia</summary>
      
    
    
    
    
    <category term="收藏" scheme="https://polar1sssss.github.io/tags/%E6%94%B6%E8%97%8F/"/>
    
  </entry>
  
</feed>
